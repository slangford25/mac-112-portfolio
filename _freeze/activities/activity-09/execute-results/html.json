{
  "hash": "c3b22b60b4e9f9e5f25c4026f7580b3b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Wrangling Practice\"\nnumber-sections: true\nexecute: \n  warning: false\nfig-env: 'figure'\nfig-pos: 'h'\nfig-align: center\ncode-fold: false\n---\n\n\n::: {.callout-caution title=\"Learning Goals\"}\n-   Review wrangling verbs `select`, `mutate`, `filter`, `arrange`, `summarize`, `group_by`\n-   Form conceptual understanding of code without running it\n-   Practice using wrangling verbs in different way\n-   Practice dealing with dates using `lubridate` functions\n:::\n\n::: {.callout-note title=\"Additional Resources\"}\nFor more information about the topics covered in this chapter, refer to the resources below:\n\n-   [Date and Times (html)](https://r4ds.hadley.nz/datetimes) by Wickham, Çetinkaya-Rundel, & Grolemund \n:::\n\n\n## Warm-up\n\n\n### Data Science Process {-}\n\nBelow is the visual representation of the data science process we saw earlier.  Which stage are we in currently? \n\n![](https://mac-stat.github.io/images/112/legos.png)\n\n\nRecall that wrangling is important. It is much of what we spend our efforts on in Data Science. There are lots of steps, hence R functions, that can go into data wrangling. But we can get far with the following 6 *wrangling verbs*:\n\n| verb        | action                                            |\n|:------------|:--------------------------------------------------|\n| `arrange`   | **arrange** the *rows* according to some *column* |\n| `filter`    | **filter** out or obtain a subset of the *rows*   |\n| `select`    | **select** a subset of *columns*                  |\n| `mutate`    | **mutate** or create a *column*                   |\n| `summarize` | calculate a numerical **summary** of a *column*   |\n| `group_by`  | **group** the *rows* by a specified *column*      |\n\n### Example 1: Single Verb {-}\n\nLet's start by working with some TidyTuesday data on penguins. This data includes information about penguins' flippers (\"arms\") and bills (\"mouths\" or \"beaks\").  Let's import this using `read_csv()`, a function in the `tidyverse` package. For the most part, this is similar to `read.csv()`, though `read_csv()` can be more efficient at importing large datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\npenguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')\n\n# Check it out\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n:::\n\n\n::: {.callout-warning title=\"Check Understanding\"}\n\nConstruct a plot that allows us to examine how the relationship between body mass and bill length varies by species and sex.\n\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.callout-warning title=\"Check Understanding\"}\n\nUse the 6 wrangling verbs to address each task in the code chunk below.  You can tack on `|> head()` to print out just 6 rows to keep your rendered document manageable. Most of these require just 1 verb.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get data on only Adelie penguins that weigh more than 4700g\n\n\n# Get data on penguin body mass only\n# Show just the first 6 rows\n\n\n# Sort the penguins from smallest to largest body mass\n# Show just the first 6 rows\n\n\n\n# Calculate the average body mass across all penguins\n# Note: na.rm = TRUE removes the NAs from the calculation\n\n\n\n# Calculate the average body mass by species\n\n\n\n# Create a new column that records body mass in kilograms, not grams\n# NOTE: there are 1000 g in 1 kg\n# Show just the first 6 rows\n```\n:::\n\n\n\n::: {.callout-warning title=\"Check Understanding\"}\n\nHow many penguins of each species do we have? Create a viz that addresses this question.\n\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = species))\n```\n\n::: {.cell-output-display}\n![](activity-09_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-warning title=\"Check Understanding\"}\n\nCan we use the 6 verbs to calculate exactly how many penguins in each species? \n\nHINT: `n()` calculates group size.\n\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.callout-tip title=\"`count` verb\"}\nThe `count()` verb provides a handy shortcut!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <chr>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n:::\n\n\n### Example 2: Multiple Verbs {-}\n\n::: {.callout-warning title=\"Check Understanding\"}\n\nLet's practice *combining* some verbs. For each task:\n\n-   Translate the prompt into our 6 verbs. That is, think before you type.\n-   Build your code line by line. It's important to understand what's being piped into each function!\n-   Ask what you can rearrange and still get the same result.\n-   Read your final code like a paragraph / a conversation. Would another person be able to follow your logic?\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort Gentoo penguins from biggest to smallest with respect to their \n# bill length in cm (there are 10 mm in a cm)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort the species from smallest to biggest with respect to their \n# average bill length in cm\n```\n:::\n\n\n\n\n### Example 3: Interpret Code {-}\n\nLet's practice reading and making sense of somebody *else*'s code. What do you think this produces?\n\n-   How many columns? Rows?\n-   What are the column names?\n-   What's represented in each row?\n\nOnce you've thought about it, put the code inside a chunk and run it!\n\npenguins %\\>% filter(species == \"Chinstrap\") %\\>% group_by(sex) %\\>% summarize(min = min(body_mass_g), max = max(body_mass_g)) %\\>% mutate(range = max - min)\n\n\\\n\\\n\\\n\\\n\n## Exercises Part 1: Same Verbs, New Tricks\n\n\n### Exercise 1: More Filtering {.unnumbered}\n\nRecall the \"logical comparison operators\" we can use to `filter()` our data:\n\n| symbol           | meaning                   |\n|:-----------------|:--------------------------|\n| ==               | equal to                  |\n| !=               | not equal to              |\n| >               | greater than              |\n| >=              | greater than or equal to  |\n| <               | less than                 |\n| <=              | less than or equal to     |\n| %in% c(***,*** ) | a list of multiple values |\n\n#### Part a {.unnumbered}\n\n::: {.callout-tip title=\"Commenting/Uncommenting Code\"}\n\nTo comment/uncomment several lines of code at once, highlight them then click <kbd>ctrl/cmd+shift+c</kbd>.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a dataset with just Adelie and Chinstrap using %in%\n# Pipe this into `count(species)` to confirm that you only have these 2 species\npenguins |> \n   filter(species %in% c(\"Adelie\", \"Chinstrap\")) |> \n   count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  species       n\n  <chr>     <int>\n1 Adelie      152\n2 Chinstrap    68\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a dataset with just Adelie and Chinstrap using !=\n# Pipe this into `count(species)` to confirm that you only have these 2 species\npenguins |>\n  filter(species != \"Gentoo\") |>\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  species       n\n  <chr>     <int>\n1 Adelie      152\n2 Chinstrap    68\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nNotice that some of our penguins have missing (`NA`) data on some values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n:::\n\n\nThere are many ways to handle this. The right approach depends upon your research goals. A general rule is: Only get rid of observations with missing data if they're missing data on variables you *need* for the specific task at hand!\n\n**Example 1**\n\nSuppose our research focus is *just* on `body_mass_g`. Two penguins are missing this info:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# NOTE the use of is.na()\npenguins |> \n  summarize(sum(is.na(body_mass_g)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  `sum(is.na(body_mass_g))`\n                      <int>\n1                         2\n```\n\n\n:::\n:::\n\n\nLet's define a new dataset that removes these penguins:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# NOTE the use of is.na()\npenguins_w_body_mass <- penguins |> \n  filter(!is.na(body_mass_g))\n\n# Compare the number of penguins in this vs the original data\nnrow(penguins_w_body_mass)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 342\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 344\n```\n\n\n:::\n:::\n\n\nNote that some penguins in `penguins_w_body_mass` are missing info on `sex`, but we don't care since that's not related to our research question:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_w_body_mass |> \n  summarize(sum(is.na(sex)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  `sum(is.na(sex))`\n              <int>\n1                 9\n```\n\n\n:::\n:::\n\n\n**Example 2**\n\nIn the *very rare case* that we need complete information on every variable for the specific task at hand, we can use `na.omit()` to get rid of *any* penguin that's missing info on *any* variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_complete <- penguins |> \n  na.omit()\n```\n:::\n\n\nHow many penguins did this eliminate?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(penguins_complete)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 333\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 344\n```\n\n\n:::\n:::\n\n\n#### Part c {.unnumbered}\n\nExplain why we should only use `na.omit()` in extreme circumstances.\n\nit can remove a lot of observations\n\n\\\n\\\n\\\n\\\n\n### Exercise 2: More Selecting {.unnumbered}\n\nBeing able to `select()` only certain columns can help simplify our data. This is especially important when we're working with *lots* of columns (which we haven't done yet). It can also get tedious to type out every column of interest. Here are some shortcuts:\n\n-   `-` *removes* a given variable and keeps all others (e.g. `select(-island)`)\n-   `starts_with(\"___\")`, `ends_with(\"___\")`, or `contains(\"___\")` selects only the columns that either start with, end with, or simply contain the given string of characters\n\nUse these *shortcuts* to create the following datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First: recall the variable names\nnames(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a shortcut to keep everything but the year and island variables\npenguins %>% \n  select(-year & -island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 6\n   species bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex   \n   <chr>            <dbl>         <dbl>             <dbl>       <dbl> <chr> \n 1 Adelie            39.1          18.7               181        3750 male  \n 2 Adelie            39.5          17.4               186        3800 female\n 3 Adelie            40.3          18                 195        3250 female\n 4 Adelie            NA            NA                  NA          NA <NA>  \n 5 Adelie            36.7          19.3               193        3450 female\n 6 Adelie            39.3          20.6               190        3650 male  \n 7 Adelie            38.9          17.8               181        3625 female\n 8 Adelie            39.2          19.6               195        4675 male  \n 9 Adelie            34.1          18.1               193        3475 <NA>  \n10 Adelie            42            20.2               190        4250 <NA>  \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a shortcut to keep only species and the penguin characteristics measured in mm\npenguins %>% \n  select(species | ends_with(\"mm\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n   species bill_length_mm bill_depth_mm flipper_length_mm\n   <chr>            <dbl>         <dbl>             <dbl>\n 1 Adelie            39.1          18.7               181\n 2 Adelie            39.5          17.4               186\n 3 Adelie            40.3          18                 195\n 4 Adelie            NA            NA                  NA\n 5 Adelie            36.7          19.3               193\n 6 Adelie            39.3          20.6               190\n 7 Adelie            38.9          17.8               181\n 8 Adelie            39.2          19.6               195\n 9 Adelie            34.1          18.1               193\n10 Adelie            42            20.2               190\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a shortcut to keep only species and bill-related measurements\npenguins %>% \n  select(species | starts_with(\"bill\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   species bill_length_mm bill_depth_mm\n   <chr>            <dbl>         <dbl>\n 1 Adelie            39.1          18.7\n 2 Adelie            39.5          17.4\n 3 Adelie            40.3          18  \n 4 Adelie            NA            NA  \n 5 Adelie            36.7          19.3\n 6 Adelie            39.3          20.6\n 7 Adelie            38.9          17.8\n 8 Adelie            39.2          19.6\n 9 Adelie            34.1          18.1\n10 Adelie            42            20.2\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a shortcut to keep only species and the length-related characteristics\npenguins %>% \n  select(species | contains(\"length\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   species bill_length_mm flipper_length_mm\n   <chr>            <dbl>             <dbl>\n 1 Adelie            39.1               181\n 2 Adelie            39.5               186\n 3 Adelie            40.3               195\n 4 Adelie            NA                  NA\n 5 Adelie            36.7               193\n 6 Adelie            39.3               190\n 7 Adelie            38.9               181\n 8 Adelie            39.2               195\n 9 Adelie            34.1               193\n10 Adelie            42                 190\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 3: Arranging, Counting, & Grouping by Multiple Variables {.unnumbered}\n\nWe've done examples where we need to `filter()` by more than one variable, or `select()` more than one variable. Use your intuition for how we can `arrange()`, `count()`, and `group_by()` more than one variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change this code to sort the penguins by species, and then island name\n# NOTE: The first row should be an Adelie penguin living on Biscoe island\npenguins |> \n  arrange(species) %>% \n  arrange(island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>           <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Biscoe           37.8          18.3               174        3400\n 2 Adelie  Biscoe           37.7          18.7               180        3600\n 3 Adelie  Biscoe           35.9          19.2               189        3800\n 4 Adelie  Biscoe           38.2          18.1               185        3950\n 5 Adelie  Biscoe           38.8          17.2               180        3800\n 6 Adelie  Biscoe           35.3          18.9               187        3800\n 7 Adelie  Biscoe           40.6          18.6               183        3550\n 8 Adelie  Biscoe           40.5          17.9               187        3200\n 9 Adelie  Biscoe           37.9          18.6               172        3150\n10 Adelie  Biscoe           40.5          18.9               180        3950\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change this code to count the number of male/female penguins observed for each species\npenguins |> \n  group_by(sex) %>%\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n# Groups:   sex [3]\n  sex    species       n\n  <chr>  <chr>     <int>\n1 female Adelie       73\n2 female Chinstrap    34\n3 female Gentoo       58\n4 male   Adelie       73\n5 male   Chinstrap    34\n6 male   Gentoo       61\n7 <NA>   Adelie        6\n8 <NA>   Gentoo        5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change this code to calculate the average body mass by species and sex\npenguins |> \n  group_by(species, sex) |> \n  summarize(mean = mean(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex     mean\n  <chr>     <chr>  <dbl>\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Adelie    <NA>   3540 \n4 Chinstrap female 3527.\n5 Chinstrap male   3939.\n6 Gentoo    female 4680.\n7 Gentoo    male   5485.\n8 Gentoo    <NA>   4588.\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 4: Dates {.unnumbered}\n\nBefore some wrangling practice, let's explore another important concept: working with or mutating *date* variables. Dates are a whole special object type or class in R that automatically respect the order of time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get today's date\nas.Date(today())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-10-04\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Let's store this as \"today\" so we can work with it below\ntoday <- as.Date(today())\n\n# Check out the class of this object\nclass(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n\nThe `lubridate` package inside `tidyverse` contains functions that can extract various information from dates. Let's learn about some of the most common functions by applying them to `today`. For each, make a comment on what the function does\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2024\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# What do these lines produce / what's their difference?\nmonth(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nmonth(today, label = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Oct\n12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# What does this number mean?\nweek(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 40\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# What do these lines produce / what's their difference?\nmday(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nyday(today)  # This is often called the \"Julian day\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 278\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# What do these lines produce / what's their difference?\nwday(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\nwday(today, label = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Fri\nLevels: Sun < Mon < Tue < Wed < Thu < Fri < Sat\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# What do the results of these 2 lines tell us?\ntoday >= ymd(\"2024-02-14\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ntoday < ymd(\"2024-02-14\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n## Exercises Part 2: Application\n\nThe remaining exercises are *similar* to some of those on the homework.  Hence, the solutions are not provided. Let's apply these ideas to the daily `Birthdays` dataset in the `mosaic` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mosaic)\ndata(\"Birthdays\")\nhead(Birthdays)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state year month day       date wday births\n1    AK 1969     1   1 1969-01-01  Wed     14\n2    AL 1969     1   1 1969-01-01  Wed    174\n3    AR 1969     1   1 1969-01-01  Wed     78\n4    AZ 1969     1   1 1969-01-01  Wed     84\n5    CA 1969     1   1 1969-01-01  Wed    824\n6    CO 1969     1   1 1969-01-01  Wed    100\n```\n\n\n:::\n:::\n\n\n`Birthdays` gives the number of births recorded on each day of the year in each state from 1969 to 1988^[The `fivethirtyeight` package has more recent data.]. We can use our wrangling skills to understand some drivers of daily births. Putting these all together can be challenging! Remember the following ways to make tasks more manageable:\n\n-   Translate the prompt into our 6 verbs (and `count()`). That is, think before you type.\n-   Build your code line by line. It's important to understand what's being piped into each function!\n\n\n\n\n\n### Exercise 5: Warming up {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How many days of data do we have for each state?\n\n\n# How many total births were there in this time period?\n\n\n# How many total births were there per state in this time period, sorted from low to high?\n```\n:::\n\n\n\n\n### Exercise 6: Homework Reprise {.unnumbered}\n\nCreate a new dataset named `daily_births` that includes the total number of births per day (across all states) and the corresponding day of the week, eg, Mon. NOTE: Name the column with total births so that it's easier to wrangle and plot.\n\n\n::: {.cell}\n\n:::\n\n\nUsing this data, construct a plot of `births` over time, indicating the day of week.\n\n\n::: {.cell}\n\n:::\n\n\n\n\n### Exercise 7: Wrangle & Plot {.unnumbered}\n\nFor each prompt below, you can decide whether you want to: (1) wrangle and store data, then plot; or (2) wrangle data and pipe directly into ggplot. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  filter(species != \"Gentoo\") |> \n  ggplot(aes(y = bill_length_mm, x = bill_depth_mm, color = species)) + \n    geom_point()\n```\n\n::: {.cell-output-display}\n![](activity-09_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n#### Part a {.unnumbered}\n\nCalculate the total number of births in each month and year, eg, Jan 1969, Feb 1969, .... Label month by names not numbers, eg, Jan not 1. Then, plot the births by month and comment on what you learn.\n\n\n::: {.cell}\n\n:::\n\n\n#### Part b {.unnumbered}\n\nIn 1988, calculate the total number of births per week in each state. Get rid of week \"53\", which isn't a complete week! Then, make a line plot of births by week for each state and comment on what you learn. For example, do you notice any seasonal trends? Are these the same in every state? Any outliers?\n\n\n::: {.cell}\n\n:::\n\n\n#### Part c {.unnumbered}\n\nRepeat the above for just Minnesota (MN) and Louisiana (LA). MN has one of the coldest climates and LA has one of the warmest. How do their seasonal trends compare? Do you think these trends are similar in other colder and warmer states? Try it!\n\n\n::: {.cell}\n\n:::\n\n\n\n\n### Exercise 8: More Practice {.unnumbered}\n\n#### Part a {.unnumbered}\n\nCreate a dataset with only births in Massachusetts (MA) in 1979 and sort the days from those with the most births to those with the fewest.\n\n\n::: {.cell}\n\n:::\n\n\n#### Part b {.unnumbered}\n\nMake a table showing the five states with the most births between September 9, 1979 and September 12, 1979, including the 9th and 12th. Arrange the table in descending order of births.\n\n\n## Solutions\n\n<details>\n\n<summary>Click for Solutions</summary>\n\n### Example 1: Single Verb {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(y = body_mass_g, x = bill_length_mm, color = species)) + \n  geom_point() + \n  facet_wrap(~ sex)\n```\n\n::: {.cell-output-display}\n![](activity-09_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get data on only Adelie penguins that weigh more than 4700g\npenguins |> \n  filter(species == \"Adelie\", body_mass_g > 4700)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>           <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie  Biscoe           41              20               203        4725\n2 Adelie  Biscoe           43.2            19               197        4775\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get data on penguin body mass only\n# Show just the first 6 rows\npenguins |> \n  select(body_mass_g) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n  body_mass_g\n        <dbl>\n1        3750\n2        3800\n3        3250\n4          NA\n5        3450\n6        3650\n```\n\n\n:::\n\n```{.r .cell-code}\n# Sort the penguins from smallest to largest body mass\n# Show just the first 6 rows\npenguins |> \n  arrange(body_mass_g) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>     <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n1 Chinstrap Dream               46.9          16.6               192        2700\n2 Adelie    Biscoe              36.5          16.6               181        2850\n3 Adelie    Biscoe              36.4          17.1               184        2850\n4 Adelie    Biscoe              34.5          18.1               187        2900\n5 Adelie    Dream               33.1          16.1               178        2900\n6 Adelie    Torgersen           38.6          17                 188        2900\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate the average body mass across all penguins\n# Note: na.rm = TRUE removes the NAs from the calculation\npenguins |> \n  summarize(mean = mean(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   mean\n  <dbl>\n1 4202.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate the average body mass by species\npenguins |> \n  group_by(species) |> \n  summarize(mean = mean(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species    mean\n  <chr>     <dbl>\n1 Adelie    3701.\n2 Chinstrap 3733.\n3 Gentoo    5076.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create a new column that records body mass in kilograms, not grams\n# NOTE: there are 1000 g in 1 kg\n# Show just the first 6 rows\npenguins |> \n  mutate(body_mass_kg = body_mass_g/1000) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 3 more variables: sex <chr>, year <dbl>, body_mass_kg <dbl>\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = species)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](activity-09_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins |> \n  group_by(species) |> \n  summarize(n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   `n()`\n  <chr>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n\n```{.r .cell-code}\npenguins |> \n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <chr>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n\n\n### Example 2: Multiple Verbs {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort Gentoo penguins from biggest to smallest with respect to their \n# bill length in cm (there are 10 mm in a cm)\npenguins |> \n  filter(species == \"Gentoo\") |> \n  mutate(bill_length_cm = bill_length_mm / 10) |> \n  arrange(desc(bill_length_cm))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 124 × 9\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>           <dbl>         <dbl>             <dbl>       <dbl>\n 1 Gentoo  Biscoe           59.6          17                 230        6050\n 2 Gentoo  Biscoe           55.9          17                 228        5600\n 3 Gentoo  Biscoe           55.1          16                 230        5850\n 4 Gentoo  Biscoe           54.3          15.7               231        5650\n 5 Gentoo  Biscoe           53.4          15.8               219        5500\n 6 Gentoo  Biscoe           52.5          15.6               221        5450\n 7 Gentoo  Biscoe           52.2          17.1               228        5400\n 8 Gentoo  Biscoe           52.1          17                 230        5550\n 9 Gentoo  Biscoe           51.5          16.3               230        5500\n10 Gentoo  Biscoe           51.3          14.2               218        5300\n# ℹ 114 more rows\n# ℹ 3 more variables: sex <chr>, year <dbl>, bill_length_cm <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Sort the species from smallest to biggest with respect to their \n# average bill length in cm\npenguins |> \n  mutate(bill_length_cm = bill_length_mm / 10) |> \n  group_by(species) |> \n  summarize(mean_bill_length = mean(bill_length_cm, na.rm = TRUE)) |> \n  arrange(desc(mean_bill_length))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   mean_bill_length\n  <chr>                <dbl>\n1 Chinstrap             4.88\n2 Gentoo                4.75\n3 Adelie                3.88\n```\n\n\n:::\n:::\n\n\n\n\n### Example 3: Interpret Code {.unnumbered}\n\n\n\n### Exercise 1: More Filtering {.unnumbered}\n\n#### Part a {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a dataset with just Adelie and Chinstrap using %in%\n# Pipe this into `count(species)` to confirm that you only have these 2 species\npenguins |>\n  filter(species %in% c(\"Adelie\", \"Chinstrap\")) |>\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  species       n\n  <chr>     <int>\n1 Adelie      152\n2 Chinstrap    68\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a dataset with just Adelie and Chinstrap using !=\n# Pipe this into `count(species)` to confirm that you only have these 2 species\npenguins |>\n  filter(species != \"Gentoo\") |>\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  species       n\n  <chr>     <int>\n1 Adelie      152\n2 Chinstrap    68\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\n#### Part c {.unnumbered}\n\nIt might get rid of data points even if they have complete information on the variables we need, just because they're missing info on variables we don't need.\n\n\n### Exercise 2: More selecting {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First: recall the variable names\nnames(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a shortcut to keep everything but the year and island variables\npenguins |> \n  select(-year, -island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 6\n   species bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex   \n   <chr>            <dbl>         <dbl>             <dbl>       <dbl> <chr> \n 1 Adelie            39.1          18.7               181        3750 male  \n 2 Adelie            39.5          17.4               186        3800 female\n 3 Adelie            40.3          18                 195        3250 female\n 4 Adelie            NA            NA                  NA          NA <NA>  \n 5 Adelie            36.7          19.3               193        3450 female\n 6 Adelie            39.3          20.6               190        3650 male  \n 7 Adelie            38.9          17.8               181        3625 female\n 8 Adelie            39.2          19.6               195        4675 male  \n 9 Adelie            34.1          18.1               193        3475 <NA>  \n10 Adelie            42            20.2               190        4250 <NA>  \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a shortcut to keep only species and the penguin characteristics measured in mm\npenguins |> \n  select(species, ends_with(\"mm\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n   species bill_length_mm bill_depth_mm flipper_length_mm\n   <chr>            <dbl>         <dbl>             <dbl>\n 1 Adelie            39.1          18.7               181\n 2 Adelie            39.5          17.4               186\n 3 Adelie            40.3          18                 195\n 4 Adelie            NA            NA                  NA\n 5 Adelie            36.7          19.3               193\n 6 Adelie            39.3          20.6               190\n 7 Adelie            38.9          17.8               181\n 8 Adelie            39.2          19.6               195\n 9 Adelie            34.1          18.1               193\n10 Adelie            42            20.2               190\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a shortcut to keep only species and bill-related measurements\npenguins |> \n  select(species, starts_with(\"bill\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   species bill_length_mm bill_depth_mm\n   <chr>            <dbl>         <dbl>\n 1 Adelie            39.1          18.7\n 2 Adelie            39.5          17.4\n 3 Adelie            40.3          18  \n 4 Adelie            NA            NA  \n 5 Adelie            36.7          19.3\n 6 Adelie            39.3          20.6\n 7 Adelie            38.9          17.8\n 8 Adelie            39.2          19.6\n 9 Adelie            34.1          18.1\n10 Adelie            42            20.2\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a shortcut to keep only species and the length-related characteristics\npenguins |> \n  select(species, contains(\"length\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   species bill_length_mm flipper_length_mm\n   <chr>            <dbl>             <dbl>\n 1 Adelie            39.1               181\n 2 Adelie            39.5               186\n 3 Adelie            40.3               195\n 4 Adelie            NA                  NA\n 5 Adelie            36.7               193\n 6 Adelie            39.3               190\n 7 Adelie            38.9               181\n 8 Adelie            39.2               195\n 9 Adelie            34.1               193\n10 Adelie            42                 190\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n### Exercise 3: Arranging, counting, & grouping by multiple variables {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change this code to sort the penguins by species, and then island name\n# NOTE: The first row should be an Adelie penguin living on Biscoe island\npenguins |> \n  arrange(species, island) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>           <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie  Biscoe           37.8          18.3               174        3400\n2 Adelie  Biscoe           37.7          18.7               180        3600\n3 Adelie  Biscoe           35.9          19.2               189        3800\n4 Adelie  Biscoe           38.2          18.1               185        3950\n5 Adelie  Biscoe           38.8          17.2               180        3800\n6 Adelie  Biscoe           35.3          18.9               187        3800\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change this code to count the number of male/female penguins observed for each species\npenguins |> \n  count(species, sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  species   sex        n\n  <chr>     <chr>  <int>\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    <NA>       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    <NA>       5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change this code to calculate the average body mass by species and sex\npenguins |> \n  group_by(species, sex) |> \n  summarize(mean = mean(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex     mean\n  <chr>     <chr>  <dbl>\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Adelie    <NA>   3540 \n4 Chinstrap female 3527.\n5 Chinstrap male   3939.\n6 Gentoo    female 4680.\n7 Gentoo    male   5485.\n8 Gentoo    <NA>   4588.\n```\n\n\n:::\n:::\n\n\n\n### Exercise 4: Dates {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get today's date\nas.Date(today())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-10-04\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Let's store this as \"today\" so we can work with it below\ntoday <- as.Date(today())\n\n# Check out the class of this object\nclass(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Records just the 4-digit year\nyear(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2024\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Today's month, as a number or label\nmonth(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nmonth(today, label = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Oct\n12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is the week of the year (1-52)\nweek(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 40\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Day of the month (1-31) and day of the year (1-366)\nmday(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nyday(today)  # This is often called the \"Julian day\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 278\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Day of the week as a number or label\nwday(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\nwday(today, label = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Fri\nLevels: Sun < Mon < Tue < Wed < Thu < Fri < Sat\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# today is on or after Feb 14, 2024\ntoday >= ymd(\"2024-02-14\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# today is not before Feb 14, 2024\ntoday < ymd(\"2024-02-14\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n</details>\n",
    "supporting": [
      "activity-09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}