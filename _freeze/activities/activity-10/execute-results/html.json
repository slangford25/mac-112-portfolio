{
  "hash": "bd163fb95482a006c00ffa4b4e63c9c2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reshaping Data\"\nnumber-sections: true\nexecute: \n  warning: false\nfig-env: 'figure'\nfig-pos: 'h'\nfig-align: center\ncode-fold: false\n---\n\n\n::: {.callout-caution title=\"Learning Goals\"}\n-   Understand what it means to \"reshape\" data.\n-   Understand the difference between *wide* and *long* data formats.\n-   Be able to distinguish the units of observation for a given data set.\n-   Explore how to reshape data using `pivot_wider()` and `pivot_longer()` in the `tidyr` package\n:::\n\n::: {.callout-note title=\"Additional Resources\"}\nFor more information about the topics covered in this chapter, refer to the resources below:\n\n-   [Demonstrating pivoting (YouTube)](https://www.youtube.com/watch?v=k3SZ8keibuQ&feature=youtu.be) by Lisa Lendway\n-   [Pivoting vignette (html)](https://tidyr.tidyverse.org/articles/pivot.html) by tidyr\n-   [Pivoting (html)](https://r4ds.hadley.nz/data-tidy.html#sec-pivoting) by Wickham and Grolemund\n-   [Reshaping data](https://mdsr-book.github.io/mdsr2e/ch-dataII.html#reshaping-data) by Baumer, Kaplan, and Horton\n:::\n\n\n\n\n\n## Warm-up\n\n**EXAMPLE 1: warm-up counts and proportions**\n\nRecall the `penguins` we worked with last class:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\npenguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')\n```\n:::\n\n\nTally up the number of male/female penguins by species in 2 ways:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using count()\n\n\n# Using group_by() and summarize()\n```\n:::\n\n\nDefine a new column that includes the *proportion* or *relative frequencies* of male/female penguins in each species.\n\n-   We can't do this by adjusting our `count()` code, but *can* adjust the `group_by()` and `summarize()` code since it's still tracking the group categories in the background.\n-   Does the order of `species` and `sex` in `group_by()` matter?\n\n\n::: {.cell}\n\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 2: New data**\n\nWhat will the following code do? Think about it before running.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_avg <- penguins |> \n  group_by(species, sex) |> \n  summarize(avg_body_mass = mean(body_mass_g, na.rm = TRUE)) |> \n  na.omit()\n```\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 3: units of observation**\n\nTo get the information on average body masses, we *reshaped* our original data.\n\n1.  Did the *reshaping* process change the units of observation?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Units of observation = ???\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Units of observation = ???\nhead(penguin_avg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  <chr>     <chr>          <dbl>\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n```\n\n\n:::\n:::\n\n\n2.  Did the reshaping process result in any information loss from the original data?\n\n\\\n\\\n\\\n\\\n\\\n\n**Reshaping data**\n\nThere are two general types of reshaped data:\n\n-   *aggregate* data\\\n    For example, using `group_by()` with `summarize()` gains aggregate information about our observations but loses data on individual observations.\n\n-   *raw* data, reshaped\\\n    We often want to retain all information on individual observations, but need to reshape it in order to perform the task at hand.\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 4: reshape it with your mind**\n\nLet's calculate the *difference* in average body mass, male vs female, for each species. Since `penguin_avg` is small, we *could* do these calculations by hand. But this doesn't scale up to bigger datasets.\n\n-   Sketch out (on paper, in your head, anything) how this data would need to be *reshaped*, *without* losing any information, in order to calculate the differences in average body mass using our wrangling verbs. Make it as specific as possible, with column labels, entries, correct numbers, etc.\n\n-   Identify the units of observation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_avg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  <chr>     <chr>          <dbl>\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\\\n\n**Wider vs Longer formats**\n\nMaking our data *longer* or *wider* reshapes the data, changing the units of observation while retaining *all* raw information:\n\n1.  Make the data *longer*, i.e. combine values from multiple variables into 1 variable. EXAMPLE: `1999` and `2000` represent two years. We want to *combine* their results into 1 variable without losing any information.\n\n![](https://mac-stat.github.io/images/112/pivot_longer.png)\n\n2.  Make the data *wider*, i.e. spread out the values across new variables. EXAMPLE: `cases` and `pop` represent two categories within `type`. To compare or combine their `count` outcomes side-by-side, we can *separate* them into their own variables.\n\n![](https://mac-stat.github.io/images/112/pivot_wider.png)\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 5: pivot wider**\n\nBecause it's a small enough dataset to examine all at once, let's start with our `penguin_avg` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_avg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  <chr>     <chr>          <dbl>\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n```\n\n\n:::\n:::\n\n\nWith the goal of being able to calculate the *difference* in average body mass, male vs female, for each species, let's make the dataset *wider*. That is, let's get one row per `species` with separate columns for the average body mass by `sex`. Put this code into a chunk and run it:\n\npenguin_avg |\\> pivot_wider(names_from = sex, values_from = avg_body_mass)\n\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-note title=\"Pivot Wider\"}\n\n-   `names_from` = the variable whose values we want to separate into their own columns, i.e. where we want to get the new column *names from*\n-   `values_from` = which variable to take the new column *values from*\n\n:::\n\nFOLLOW-UP:\n\n-   What are the units of observation?\n\n-   Did we lose any information when we widened the data?\n\n-   Use the wide data to calculate the difference in average body mass, male vs female, for each species.\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 6: Pivot longer**\n\nLet's store our wide data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_avg_wide <- penguin_avg |> \n  pivot_wider(names_from = sex, values_from = avg_body_mass)\n\npenguin_avg_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n# Groups:   species [3]\n  species   female  male\n  <chr>      <dbl> <dbl>\n1 Adelie     3369. 4043.\n2 Chinstrap  3527. 3939.\n3 Gentoo     4680. 5485.\n```\n\n\n:::\n:::\n\n\nSuppose we wanted to change this data back to a *longer* format. In general, this happens when some variables (here `female` and `male`) represent two categories or values of some *broader* variable (here `sex`), and we want to combine them into that 1 variable without losing any information. Let's `pivot_longer()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can either communicate which variables we WANT to collect into a single column (female, male)\npenguin_avg_wide |> \n  pivot_longer(cols = c(female, male), names_to = \"sex\", values_to = \"avg_body_mass\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  <chr>     <chr>          <dbl>\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Or which variable(s) we do NOT want to collect into a single column (sex)\npenguin_avg_wide |> \n  pivot_longer(cols = -species, names_to = \"sex\", values_to = \"avg_body_mass\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  <chr>     <chr>          <dbl>\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n```\n\n\n:::\n:::\n\n\n::: {.callout-note title=\"Pivot Longer\"}\n\n-   `cols` = the columns (variables) to collect into a single, new variable. we can also specify what variables we *don't* want to collect\n-   `names_to` = the name of the new variable which will include the *names* or labels of the collected variables\n-   `values_to` = the name of the new variable which will include the *values* of the collected variables\n\n:::\n\nFOLLOW-UP:\n\n-   What are the units of observation?\n\n-   Did we lose any information when we lengthened the data?\n\n-   Why did we put the variables in quotes \"\" here but not when we used `pivot_wider()`?\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 7: Practice**\n\nLet's make up some data on the orders of 2 different customers at 3 different restaurants:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfood <- data.frame(\n  customer = rep(c(\"A\", \"B\"), each = 3),\n  restaurant = rep(c(\"Shish\", \"FrenchMeadow\", \"DunnBros\"), 2),\n  order = c(\"falafel\", \"salad\", \"coffee\", \"baklava\", \"pastry\", \"tea\")\n)\nfood\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  customer   restaurant   order\n1        A        Shish falafel\n2        A FrenchMeadow   salad\n3        A     DunnBros  coffee\n4        B        Shish baklava\n5        B FrenchMeadow  pastry\n6        B     DunnBros     tea\n```\n\n\n:::\n:::\n\n\nThe units of observation in `food` are customer / restaurant combinations. Wrangle this data so that the units of observation are customers, spreading the restaurants into separate columns.\n\n\n::: {.cell}\n\n:::\n\n\nConsider 2 more customers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmore_food <- data.frame(\n  customer = c(\"C\", \"D\"),\n  Shish = c(\"coffee\", \"maza\"),\n  FrenchMeadow = c(\"soup\", \"sandwich\"),\n  DunnBros = c(\"cookie\", \"coffee\")\n)\nmore_food\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  customer  Shish FrenchMeadow DunnBros\n1        C coffee         soup   cookie\n2        D   maza     sandwich   coffee\n```\n\n\n:::\n:::\n\n\nWrangle this data so that the 3 restaurant columns are combined into 1, hence the units of observation are customer / restaurant combinations.\n\n\n::: {.cell}\n\n:::\n\n\n\\\n\\\n\\\n\\\n\n## Exercises\n\n### Exercise 1: What's the problem? {.unnumbered}\n\nConsider data on a sleep study in which subjects received only 3 hours of sleep per night.  Each day, their reaction time to a stimulus (in ms) was recorded.[^10-reshaping-data-1]\n\n[^10-reshaping-data-1]: Gregory Belenky, Nancy J. Wesensten, David R. Thorne, Maria L. Thomas, Helen C. Sing, Daniel P. Redmond, Michael B. Russo and Thomas J. Balkin (2003) Patterns of performance degradation and restoration during sleep restriction and subsequent recovery: a sleep dose-response study. Journal of Sleep Research 12, 1–12.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_wide <- read.csv(\"https://mac-stat.github.io/data/sleep_wide.csv\")\n\nhead(sleep_wide)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Subject  day_0  day_1  day_2  day_3  day_4  day_5  day_6  day_7  day_8  day_9\n1     308 249.56 258.70 250.80 321.44 356.85 414.69 382.20 290.15 430.59 466.35\n2     309 222.73 205.27 202.98 204.71 207.72 215.96 213.63 217.73 224.30 237.31\n3     310 199.05 194.33 234.32 232.84 229.31 220.46 235.42 255.75 261.01 247.52\n4     330 321.54 300.40 283.86 285.13 285.80 297.59 280.24 318.26 305.35 354.05\n5     331 287.61 285.00 301.82 320.12 316.28 293.32 290.08 334.82 293.75 371.58\n6     332 234.86 242.81 272.96 309.77 317.46 310.00 454.16 346.83 330.30 253.86\n```\n\n\n:::\n:::\n\n\n#### Part a {.unnumbered}\n\nWhat are the units of observation in `sleep_wide`?\neach subject\n\n#### Part b {.unnumbered}\n\nSuppose I ask you to plot each subject's reaction time (y-axis) vs the number of days of sleep restriction (x-axis). \"Sketch\" out in words what the first few rows of the data need to look like in order to do this. It might help to think about what you'd need to complete the plotting frame:\n\n`ggplot(___, aes(y = ___, x = ___, color = ___))`\n\n#### Part c {.unnumbered}\n\nHow can you obtain the dataset you sketched in part b?\n\n-   just using `sleep_wide`\n-   `pivot_longer()`\n-   `pivot_wider()`\n\n\\\n\\\n\\\n\\\n\n### Exercise 2: Pivot longer {.unnumbered}\n\nTo plot reaction time by day for each subject, we need to reshape the data into a **long** format where each row represents a subject/day combination. Specifically, we want a dataset with 3 columns and a first few rows that look something like this:\n\n| Subject | day | reaction_time |\n|--------:|----:|--------------:|\n|     308 |   0 |        249.56 |\n|     308 |   1 |        258.70 |\n|     308 |   2 |        250.80 |\n\n#### Part a {.unnumbered}\n\nUse `pivot_longer()` to create the long-format dataset above. Show the first 3 lines (`head(3)`), which should be *similar* to those above. Follow-up: Thinking forward to plotting reaction time vs day for each subject, what would you like to fix / change about this dataset?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For cols, try 2 appproaches: using - and starts_with\nsleep_wide |>\n  pivot_longer(cols = -Subject, names_to = \"day\", values_to = \"reaction_time\") |>\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  Subject day   reaction_time\n    <int> <chr>         <dbl>\n1     308 day_0          250.\n2     308 day_1          259.\n3     308 day_2          251.\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nRun this chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_long <- sleep_wide |>\n  pivot_longer(cols = -Subject,\n               names_to = \"day\",\n               names_prefix = \"day_\",\n               values_to = \"reaction_time\")\n\nhead(sleep_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  Subject day   reaction_time\n    <int> <chr>         <dbl>\n1     308 0              250.\n2     308 1              259.\n3     308 2              251.\n4     308 3              321.\n5     308 4              357.\n6     308 5              415.\n```\n\n\n:::\n:::\n\n\nFollow-up:\n\n-   Besides putting each argument on a different line for readability and storing the results, what changed in the code?\n-   How did this impact how the values are recorded in the `day` column?\n\n#### Part c {.unnumbered}\n\nUsing `sleep_long`, construct a line plot of reaction time vs day for each subject. This will look goofy no matter what you do. Why? HINT: look back at `head(sleep_long)`. What class or type of variables are `Subject` and `day`? What do we *want* them to be?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sleep_long, aes(x= day, y = reaction_time)) +\n  geom_smooth() +\n  facet_wrap(~Subject)\n```\n\n::: {.cell-output-display}\n![](activity-10_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 3: Changing variable classes & plotting {.unnumbered}\n\nLet's finalize `sleep_long` by *mutating* the `Subject` variable to be a `factor` (categorical) and the `day` variable to be `numeric` (quantitative). Take note of the `mutate()` code! You'll use this type of code a lot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_long <- sleep_wide |>\n  pivot_longer(cols = -Subject,\n               names_to = \"day\",\n               names_prefix = \"day_\",\n               values_to = \"reaction_time\") |> \n  mutate(Subject = as.factor(Subject), day = as.numeric(day))\n\n# Check it out\n# Same data, different class\nhead(sleep_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  Subject   day reaction_time\n  <fct>   <dbl>         <dbl>\n1 308         0          250.\n2 308         1          259.\n3 308         2          251.\n4 308         3          321.\n5 308         4          357.\n6 308         5          415.\n```\n\n\n:::\n:::\n\n\n#### Part a {.unnumbered}\n\n*Now* make some plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a line plot of reaction time by day for each subject\n# Put these all on the same frame\nggplot(sleep_long, aes(x= day, y = reaction_time, color = Subject)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](activity-10_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a line plot of reaction time by day for each subject\n# Put these all on separate frames (one per subject)\nggplot(sleep_long, aes(x= day, y = reaction_time)) +\n  geom_line() +\n  facet_wrap(~Subject)\n```\n\n::: {.cell-output-display}\n![](activity-10_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nSummarize what you learned from the plots. For example:\n\n-   What's the general relationship between reaction time and sleep?\n-   Is this the same for everybody? What differs?\n\n\\\n\\\n\\\n\\\n\n### Exercise 4: Pivot wider {.unnumbered}\n\nMake the data *wide* again, with each day becoming its own column.\n\n#### Part a {.unnumbered}\n\nAdjust the code below. What don't you like about the column labels?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_long |>\n  pivot_wider(names_from = day, values_from = reaction_time) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  Subject   `0`   `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`   `9`\n  <fct>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 308      250.  259.  251.  321.  357.  415.  382.  290.  431.  466.\n2 309      223.  205.  203.  205.  208.  216.  214.  218.  224.  237.\n3 310      199.  194.  234.  233.  229.  220.  235.  256.  261.  248.\n4 330      322.  300.  284.  285.  286.  298.  280.  318.  305.  354.\n5 331      288.  285   302.  320.  316.  293.  290.  335.  294.  372.\n6 332      235.  243.  273.  310.  317.  310   454.  347.  330.  254.\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nUsing your intuition, adjust your code from part a to name the reaction time columns \"day_0\", \"day_1\", etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_long |>\n  pivot_wider(names_from = day, values_from = reaction_time, names_prefix = \"day_\") |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  Subject day_0 day_1 day_2 day_3 day_4 day_5 day_6 day_7 day_8 day_9\n  <fct>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 308      250.  259.  251.  321.  357.  415.  382.  290.  431.  466.\n2 309      223.  205.  203.  205.  208.  216.  214.  218.  224.  237.\n3 310      199.  194.  234.  233.  229.  220.  235.  256.  261.  248.\n4 330      322.  300.  284.  285.  286.  298.  280.  318.  305.  354.\n5 331      288.  285   302.  320.  316.  293.  290.  335.  294.  372.\n6 332      235.  243.  273.  310.  317.  310   454.  347.  330.  254.\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 5: Practice with Billboard charts {.unnumbered}\n\nLoad data on songs that hit the `billboard` charts around the year 2000. Included for each song is the `artist` name, `track` name, the date it hit the charts (`date.enter`), and `wk`-related variables that indicate rankings in each subsequent week on the charts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nlibrary(tidyr)\ndata(\"billboard\")\n\n# Check it out\nhead(billboard)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 79\n  artist      track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n  <chr>       <chr> <date>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 2 Pac       Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n2 2Ge+her     The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n3 3 Doors Do… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n4 3 Doors Do… Loser 2000-10-21      76    76    72    69    67    65    55    59\n5 504 Boyz    Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n6 98^0        Give… 2000-08-19      51    39    34    26    26    19     2     2\n# ℹ 68 more variables: wk9 <dbl>, wk10 <dbl>, wk11 <dbl>, wk12 <dbl>,\n#   wk13 <dbl>, wk14 <dbl>, wk15 <dbl>, wk16 <dbl>, wk17 <dbl>, wk18 <dbl>,\n#   wk19 <dbl>, wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>,\n#   wk25 <dbl>, wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>, wk30 <dbl>,\n#   wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>, wk36 <dbl>,\n#   wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, wk40 <dbl>, wk41 <dbl>, wk42 <dbl>,\n#   wk43 <dbl>, wk44 <dbl>, wk45 <dbl>, wk46 <dbl>, wk47 <dbl>, wk48 <dbl>, …\n```\n\n\n:::\n:::\n\n\nIn using this data, you'll need to determine if and when the data needs to be reshaped for the task at hand.\n\n#### Part a {.unnumbered}\n\nConstruct and summarize a plot of how a song's Billboard ranking its 2nd week on the chart (y-axis) is related to its ranking the 1st week on the charts (x-axis). Add a reference line `geom_abline(intercept = 0, slope = 1)`. Songs *above* this line *improved* their rankings from the 1st to 2nd week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(billboard, aes(x = wk1, y = wk2)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1)\n```\n\n::: {.cell-output-display}\n![](activity-10_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nUse your wrangling tools to identify *which* songs are those above the line in Part a, i.e. with rankings that went up from week 1 to week 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard %>% \n  filter(wk2 > wk1) %>% \n  select(track, wk1, wk2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n  track                 wk1   wk2\n  <chr>               <dbl> <dbl>\n1 Crybaby                28    34\n2 A Little Gasoline      75    82\n3 The Quittin' Kind      98   100\n4 L.A. Song              99   100\n5 Hey Papi               98   100\n6 Callin' Me             83    89\n7 Nothing As It Seems    49    70\n```\n\n\n:::\n:::\n\n\n#### Part c {.unnumbered}\n\nDefine a new dataset, `nov_1999`, which:\n\n-   only includes data on songs that entered the Billboard charts on November 6, 1999\n-   keeps all variables *except* `track` and `date.entered`. HINT: How can you avoid writing out all the variable names you want to keep?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define nov_1999\nnov_1999 <- billboard %>% \n  filter(date.entered == \"1999-11-06\") %>% \n  select(-track, -date.entered)\n\n# Confirm that nov_1999 has 2 rows (songs) and 77 columns\ndim(nov_1999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2 77\n```\n\n\n:::\n:::\n\n\n#### Part d {.unnumbered}\n\nCreate and discuss a visualization of the rankings (y-axis) over time (x-axis) for the 2 songs in `nov_1999`. There are hints below (if you scroll), but you're encouraged to play around and use as few hints as possible.\n\n\n::: {.cell}\n\n:::\n\n\nHints:\n\n-   Should you first pivot wider or longer?\n-   Once you pivot, the week number is turned into a character variable. How can you change it to a number?\n\n\\\n\\\n\\\n\\\n\n### Exercise 6: Practice with the Daily Show {.unnumbered}\n\nThe data associated with [this article](https://fivethirtyeight.com/datalab/every-guest-jon-stewart-ever-had-on-the-daily-show/) is available in the `fivethirtyeight` package, and is loaded into `daily` below. It includes a list of every guest to ever appear on Jon Stewart's The Daily Show, a \"late-night talk and satirical news\" program (per Wikipedia). Check out the dataset and note that when multiple people appeared together, each person receives their own line:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fivethirtyeight)\ndata(\"daily_show_guests\")\ndaily <- daily_show_guests\n```\n:::\n\n\nIn analyzing this data, you'll need to determine if and when the data needs to be reshaped.\n\n#### Part a {.unnumbered}\n\nIdentify the 15 guests that appeared the most. (This isn't a very diverse guest list!)\n\n\n::: {.cell}\n\n:::\n\n\n#### Part b {.unnumbered}\n\nCHALLENGE: Create the following data set containing 19 columns:\n\n-   The first column should have the 15 guests with the highest number of total appearances on the show, listed in descending order of number of appearances.\n-   17 columns should show the number of appearances of the corresponding guest in each year from 1999 to 2015 (one per column).\n-   Another column should show the total number of appearances for the corresponding guest over the entire duration of the show.\n\nThere are hints below (if you scroll), but you're encouraged to play around and use as few hints as possible.\n\n\n::: {.cell}\n\n:::\n\n\nHINTS: There are lots of ways to do this. You don't necessarily need all of these hints.\n\n-   First obtain the number of times a guest appears each year.\n-   To this, add a new column which includes the total number of times a guest appears across all years.\n-   Pivot (longer or wider?). When you do, use `values_fill = 0` to replace NA values with 0.\n-   Arrange, then and keep the top 15.\n\n#### Part c {.unnumbered}\n\nLet's recreate the first figure from [the article](https://fivethirtyeight.com/datalab/every-guest-jon-stewart-ever-had-on-the-daily-show/). This groups all guests into 3 broader occupational categories. However, our current data has 18 categories:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily |> \n  count(group)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 2\n   group              n\n   <chr>          <int>\n 1 Academic         103\n 2 Acting           930\n 3 Advocacy          24\n 4 Athletics         52\n 5 Business          25\n 6 Clergy             8\n 7 Comedy           150\n 8 Consultant        18\n 9 Government        40\n10 Media            751\n11 Military          16\n12 Misc              45\n13 Musician         123\n14 Political Aide    36\n15 Politician       308\n16 Science           28\n17 media              5\n18 <NA>              31\n```\n\n\n:::\n:::\n\n\nLet's define a new dataset that includes a new variable, `broad_group`, that buckets these 18 categories into the 3 bigger ones used in the article. And get rid of any rows missing information on `broad_group`. You'll learn the code soon! For now, just run this chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- daily |> \n  mutate(broad_group = case_when(\n    group %in% c(\"Acting\", \"Athletics\", \"Comedy\", \"Musician\") ~ \"Acting, Comedy & Music\",\n    group %in% c(\"Media\", \"media\", \"Science\", \"Academic\", \"Consultant\", \"Clergy\") ~ \"Media\",\n    group %in% c(\"Politician\", \"Political Aide\", \"Government\", \"Military\", \"Business\", \"Advocacy\") ~ \"Government and Politics\",\n    .default = NA\n  )) |> \n  filter(!is.na(broad_group))\n```\n:::\n\n\nNow, using the `broad_group` variable in `plot_data`, recreate the graphic from the article, with three different lines showing the fraction of guests in each group over time. Note: You'll have to wrangle the data first.\n\n\n::: {.cell}\n\n:::\n\n\n\\\n\\\n\\\n\\\n\n\n## Solutions\n\n<details>\n\n<summary>Click for Solutions</summary>\n\n### EXAMPLE 1: warm-up counts and proportions {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using count()\npenguins |> \n  count(species, sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  species   sex        n\n  <chr>     <chr>  <int>\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    <NA>       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    <NA>       5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using group_by() and summarize()\npenguins |> \n  group_by(species, sex) |> \n  summarize(n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex    `n()`\n  <chr>     <chr>  <int>\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    <NA>       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    <NA>       5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Relative frequencies\npenguins |> \n  group_by(species, sex) |> \n  summarize(n = n()) |> \n  mutate(proportion = n / sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n# Groups:   species [3]\n  species   sex        n proportion\n  <chr>     <chr>  <int>      <dbl>\n1 Adelie    female    73     0.480 \n2 Adelie    male      73     0.480 \n3 Adelie    <NA>       6     0.0395\n4 Chinstrap female    34     0.5   \n5 Chinstrap male      34     0.5   \n6 Gentoo    female    58     0.468 \n7 Gentoo    male      61     0.492 \n8 Gentoo    <NA>       5     0.0403\n```\n\n\n:::\n\n```{.r .cell-code}\n# Changing the order calculates the proportion of species within each sex\npenguins |> \n  group_by(sex, species) |> \n  summarize(n = n()) |> \n  mutate(proportion = n / sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n# Groups:   sex [3]\n  sex    species       n proportion\n  <chr>  <chr>     <int>      <dbl>\n1 female Adelie       73      0.442\n2 female Chinstrap    34      0.206\n3 female Gentoo       58      0.352\n4 male   Adelie       73      0.435\n5 male   Chinstrap    34      0.202\n6 male   Gentoo       61      0.363\n7 <NA>   Adelie        6      0.545\n8 <NA>   Gentoo        5      0.455\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### EXAMPLE 3: units of observation {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Units of observation = penguins\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Units of observation = species/sex combos\nhead(penguin_avg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  <chr>     <chr>          <dbl>\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### EXAMPLE 5: pivot wider {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_avg |> \n  pivot_wider(names_from = sex, values_from = avg_body_mass)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n# Groups:   species [3]\n  species   female  male\n  <chr>      <dbl> <dbl>\n1 Adelie     3369. 4043.\n2 Chinstrap  3527. 3939.\n3 Gentoo     4680. 5485.\n```\n\n\n:::\n:::\n\n\nFOLLOW-UP:\n\n-   What are the units of observation? species\n\n-   Did we lose any information when we widened the data? no\n\n-   Use the wide data to calculate the difference in average body mass, male vs female, for each species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_avg |> \n  pivot_wider(names_from = sex, values_from = avg_body_mass) |> \n  mutate(diff = male - female)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n# Groups:   species [3]\n  species   female  male  diff\n  <chr>      <dbl> <dbl> <dbl>\n1 Adelie     3369. 4043.  675.\n2 Chinstrap  3527. 3939.  412.\n3 Gentoo     4680. 5485.  805.\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### EXAMPLE 6: Pivot longer {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can either communicate which variables we WANT to collect into a single column (female, male)\npenguin_avg_wide |> \n  pivot_longer(cols = c(female, male), names_to = \"sex\", values_to = \"avg_body_mass\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  <chr>     <chr>          <dbl>\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Or which variable(s) we do NOT want to collect into a single column (sex)\npenguin_avg_wide |> \n  pivot_longer(cols = -species, names_to = \"sex\", values_to = \"avg_body_mass\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  <chr>     <chr>          <dbl>\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n```\n\n\n:::\n:::\n\n\nFOLLOW-UP:\n\n-   What are the units of observation? species/sex combos\n\n-   Did we lose any information when we lengthened the data? no\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 7: Practice**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfood <- data.frame(\n  customer = rep(c(\"A\", \"B\"), each = 3),\n  restaurant = rep(c(\"Shish\", \"FrenchMeadow\", \"DunnBros\"), 2),\n  order = c(\"falafel\", \"salad\", \"coffee\", \"baklava\", \"pastry\", \"tea\")\n)\n\nfood\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  customer   restaurant   order\n1        A        Shish falafel\n2        A FrenchMeadow   salad\n3        A     DunnBros  coffee\n4        B        Shish baklava\n5        B FrenchMeadow  pastry\n6        B     DunnBros     tea\n```\n\n\n:::\n\n```{.r .cell-code}\nfood |> \n  pivot_wider(names_from = restaurant, values_from = order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  customer Shish   FrenchMeadow DunnBros\n  <chr>    <chr>   <chr>        <chr>   \n1 A        falafel salad        coffee  \n2 B        baklava pastry       tea     \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmore_food <- data.frame(\n  customer = c(\"C\", \"D\"),\n  Shish = c(\"coffee\", \"maza\"),\n  FrenchMeadow = c(\"soup\", \"sandwich\"),\n  DunnBros = c(\"cookie\", \"coffee\")\n)\n\nmore_food\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  customer  Shish FrenchMeadow DunnBros\n1        C coffee         soup   cookie\n2        D   maza     sandwich   coffee\n```\n\n\n:::\n\n```{.r .cell-code}\nmore_food |> \n  pivot_longer(cols = -customer, names_to = \"restaurant\", values_to = \"order\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  customer restaurant   order   \n  <chr>    <chr>        <chr>   \n1 C        Shish        coffee  \n2 C        FrenchMeadow soup    \n3 C        DunnBros     cookie  \n4 D        Shish        maza    \n5 D        FrenchMeadow sandwich\n6 D        DunnBros     coffee  \n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 1: What's the problem? {.unnumbered}\n\n#### Part a {.unnumbered}\n\nsubjects/people\n\n#### Part c {.unnumbered}\n\n`pivot_longer()`\n\n\\\n\\\n\\\n\\\n\n### Exercise 2: Pivot longer {.unnumbered}\n\n#### Part a {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For cols, try 2 appproaches: using - and starts_with\nsleep_wide |>\n  pivot_longer(cols = -Subject, names_to = \"day\", values_to = \"reaction_time\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 180 × 3\n   Subject day   reaction_time\n     <int> <chr>         <dbl>\n 1     308 day_0          250.\n 2     308 day_1          259.\n 3     308 day_2          251.\n 4     308 day_3          321.\n 5     308 day_4          357.\n 6     308 day_5          415.\n 7     308 day_6          382.\n 8     308 day_7          290.\n 9     308 day_8          431.\n10     308 day_9          466.\n# ℹ 170 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nsleep_wide |>\n  pivot_longer(cols = starts_with(\"day\"), names_to = \"day\", values_to = \"reaction_time\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 180 × 3\n   Subject day   reaction_time\n     <int> <chr>         <dbl>\n 1     308 day_0          250.\n 2     308 day_1          259.\n 3     308 day_2          251.\n 4     308 day_3          321.\n 5     308 day_4          357.\n 6     308 day_5          415.\n 7     308 day_6          382.\n 8     308 day_7          290.\n 9     308 day_8          431.\n10     308 day_9          466.\n# ℹ 170 more rows\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nAdding `names_prefix = \"day_\"` removed \"day\\_\" from the start of the `day` entries. did this impact how the values are recorded in the `day` column?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_long <- sleep_wide |>\n  pivot_longer(cols = -Subject,\n               names_to = \"day\",\n               names_prefix = \"day_\",\n               values_to = \"reaction_time\") \n```\n:::\n\n\n#### Part c {.unnumbered}\n\n`Subject` is an integer and `day` is a character. We want them to be categorical (factor) and numeric, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sleep_long, aes(y = reaction_time, x = day, color = Subject)) + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![](activity-10_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 3: Changing variable classes & plotting {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_long <- sleep_wide |>\n  pivot_longer(cols = -Subject,\n               names_to = \"day\",\n               names_prefix = \"day_\",\n               values_to = \"reaction_time\") |> \n  mutate(Subject = as.factor(Subject), day = as.numeric(day))\n```\n:::\n\n\n#### Part a {.unnumbered}\n\n*Now* make some plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a line plot of reaction time by day for each subject\n# Put these all on the same frame\nggplot(sleep_long, aes(y = reaction_time, x = day, color = Subject)) + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![](activity-10_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a line plot of reaction time by day for each subject\n# Put these all on separate frames (one per subject)\nggplot(sleep_long, aes(y = reaction_time, x = day, color = Subject)) + \n  geom_line() + \n  facet_wrap(~ Subject)\n```\n\n::: {.cell-output-display}\n![](activity-10_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nReaction time increases (worsens) with a lack of sleep. Some subjects seem to be more impacted than others by lack of sleep, and some tend to have faster/slower reaction times in general.\n\n\\\n\\\n\\\n\\\n\n### Exercise 4: Pivot wider {.unnumbered}\n\n#### Part a {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_long |>\n  pivot_wider(names_from = day, values_from = reaction_time) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  Subject   `0`   `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`   `9`\n  <fct>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 308      250.  259.  251.  321.  357.  415.  382.  290.  431.  466.\n2 309      223.  205.  203.  205.  208.  216.  214.  218.  224.  237.\n3 310      199.  194.  234.  233.  229.  220.  235.  256.  261.  248.\n4 330      322.  300.  284.  285.  286.  298.  280.  318.  305.  354.\n5 331      288.  285   302.  320.  316.  293.  290.  335.  294.  372.\n6 332      235.  243.  273.  310.  317.  310   454.  347.  330.  254.\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_long |>\n  pivot_wider(names_from = day, values_from = reaction_time, names_prefix = \"day_\") |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  Subject day_0 day_1 day_2 day_3 day_4 day_5 day_6 day_7 day_8 day_9\n  <fct>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 308      250.  259.  251.  321.  357.  415.  382.  290.  431.  466.\n2 309      223.  205.  203.  205.  208.  216.  214.  218.  224.  237.\n3 310      199.  194.  234.  233.  229.  220.  235.  256.  261.  248.\n4 330      322.  300.  284.  285.  286.  298.  280.  318.  305.  354.\n5 331      288.  285   302.  320.  316.  293.  290.  335.  294.  372.\n6 332      235.  243.  273.  310.  317.  310   454.  347.  330.  254.\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 5: Practice with Billboard charts {.unnumbered}\n\n#### Part a {.unnumbered}\n\nThe higher a song's week 1 rating, the higher its week 2 rating tends to be. But almost all song's rankings drop from week 1 to week 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(billboard, aes(y = wk2, x = wk1)) + \n  geom_point() +\n  geom_abline(intercept = 0, slope = 1)\n```\n\n::: {.cell-output-display}\n![](activity-10_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard |> \n  filter(wk2 > wk1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 79\n  artist      track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n  <chr>       <chr> <date>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Carey, Mar… Cryb… 2000-06-24      28    34    48    62    77    90    95    NA\n2 Clark, Ter… A Li… 2000-12-16      75    82    88    96    99    99    NA    NA\n3 Diffie, Joe The … 2000-01-01      98   100   100    90    93    94    NA    NA\n4 Hart, Beth  L.A.… 1999-11-27      99   100    98    99    99    99    98    90\n5 Jay-Z       Hey … 2000-08-12      98   100    98    94    83    83    80    78\n6 Lil' Zane   Call… 2000-07-29      83    89    57    40    34    21    33    46\n7 Pearl Jam   Noth… 2000-05-13      49    70    84    89    93    91    NA    NA\n# ℹ 68 more variables: wk9 <dbl>, wk10 <dbl>, wk11 <dbl>, wk12 <dbl>,\n#   wk13 <dbl>, wk14 <dbl>, wk15 <dbl>, wk16 <dbl>, wk17 <dbl>, wk18 <dbl>,\n#   wk19 <dbl>, wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>,\n#   wk25 <dbl>, wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>, wk30 <dbl>,\n#   wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>, wk36 <dbl>,\n#   wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, wk40 <dbl>, wk41 <dbl>, wk42 <dbl>,\n#   wk43 <dbl>, wk44 <dbl>, wk45 <dbl>, wk46 <dbl>, wk47 <dbl>, wk48 <dbl>, …\n```\n\n\n:::\n:::\n\n\n#### Part c {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define nov_1999\nnov_1999 <- billboard |> \n  filter(date.entered == \"1999-11-06\") |> \n  select(-track, -date.entered)\n\n# Or\nnov_1999 <- billboard |> \n  filter(date.entered == \"1999-11-06\") |> \n  select(artist, starts_with(\"wk\"))\n\n\n# Confirm that nov_1999 has 2 rows (songs) and 77 columns\ndim(nov_1999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2 77\n```\n\n\n:::\n:::\n\n\n#### Part c {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnov_1999 |> \n  pivot_longer(cols = -artist, names_to = \"week\", names_prefix = \"wk\", values_to = \"ranking\") |> \n  mutate(week = as.numeric(week)) |> \n  ggplot(aes(y = ranking, x = week, color = artist)) + \n    geom_line()\n```\n\n::: {.cell-output-display}\n![](activity-10_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 6: Practice with the Daily Show {.unnumbered}\n\n#### Part a {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily |> \n  count(raw_guest_list) |> \n  arrange(desc(n)) |> \n  head(15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 2\n   raw_guest_list        n\n   <chr>             <int>\n 1 Fareed Zakaria       19\n 2 Denis Leary          17\n 3 Brian Williams       16\n 4 Paul Rudd            13\n 5 Ricky Gervais        13\n 6 Tom Brokaw           12\n 7 Bill O'Reilly        10\n 8 Reza Aslan           10\n 9 Richard Lewis        10\n10 Will Ferrell         10\n11 Sarah Vowell          9\n12 Adam Sandler          8\n13 Ben Affleck           8\n14 Louis C.K.            8\n15 Maggie Gyllenhaal     8\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily |> \n  count(year, raw_guest_list) |> \n  group_by(raw_guest_list) |> \n  mutate(total = sum(n)) |>\n  pivot_wider(names_from = year, \n              values_from = n,\n              values_fill = 0) |> \n  arrange(desc(total)) |> \n  head(15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 19\n# Groups:   raw_guest_list [15]\n   raw_guest_list  total `1999` `2000` `2001` `2002` `2003` `2004` `2005` `2006`\n   <chr>           <int>  <int>  <int>  <int>  <int>  <int>  <int>  <int>  <int>\n 1 Fareed Zakaria     19      0      0      1      0      1      2      2      2\n 2 Denis Leary        17      1      0      1      2      1      0      0      1\n 3 Brian Williams     16      0      0      0      0      1      1      2      1\n 4 Paul Rudd          13      1      0      1      1      1      1      1      0\n 5 Ricky Gervais      13      0      0      0      0      0      0      1      2\n 6 Tom Brokaw         12      0      0      0      1      0      2      1      0\n 7 Richard Lewis      10      1      0      2      2      1      1      0      0\n 8 Will Ferrell       10      0      1      1      0      1      1      1      1\n 9 Bill O'Reilly      10      0      0      1      1      0      1      1      0\n10 Reza Aslan         10      0      0      0      0      0      0      1      2\n11 Sarah Vowell        9      0      0      0      1      0      1      1      1\n12 Adam Sandler        8      1      2      0      1      0      0      0      1\n13 Ben Affleck         8      0      0      0      0      2      0      0      1\n14 Maggie Gyllenh…     8      0      0      0      0      1      0      1      1\n15 Louis C.K.          8      0      0      0      0      0      0      0      1\n# ℹ 9 more variables: `2007` <int>, `2008` <int>, `2009` <int>, `2010` <int>,\n#   `2011` <int>, `2012` <int>, `2013` <int>, `2014` <int>, `2015` <int>\n```\n\n\n:::\n:::\n\n\n#### Part c {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data |>\n  group_by(year, broad_group) |>\n  summarise(n = n()) |>\n  mutate(freq = n / sum(n)) |> \n  ggplot(aes(y = freq, x = year, color = broad_group)) + \n    geom_line()\n```\n\n::: {.cell-output-display}\n![](activity-10_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n</details>\n",
    "supporting": [
      "activity-10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}