{
  "hash": "ed8968ca06852ad3b372e60f7ce513e2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Factors\"\nnumber-sections: true\nexecute: \n  warning: false\nfig-env: 'figure'\nfig-pos: 'h'\nfig-align: center\ncode-fold: false\n---\n\n\n::: {.callout-caution title=\"Learning Goals\"}\n-   Understand the difference between `character` and `factor` variables.\n-   Be able to convert a `character` variable to a `factor`.\n-   Develop comfort in manipulating the order and values of a factor.\n:::\n\n::: {.callout-note title=\"Additional Resources\"}\nFor more information about the topics covered in this chapter, refer to the resources below:\n\n-   [forcats cheat sheet (pdf)](https://github.com/rstudio/cheatsheets/raw/main/factors.pdf)\n-   [Factors (html)](https://r4ds.hadley.nz/factors) by Wickham & Grolemund\n\n\n:::\n\n\n\n\n## Warm-up\n\n**Where are we? Data preparation**\n\n![](https://mac-stat.github.io/images/112/legos.png)\n\nThus far, we've learned how to:\n\n-   do some wrangling:\n    -   `arrange()` our data in a meaningful order\n    -   subset the data to only `filter()` the rows and `select()` the columns of interest\n    -   `mutate()` existing variables and define new variables\n    -   `summarize()` various aspects of a variable, both overall and by group (`group_by()`)\n-   reshape our data to fit the task at hand (`pivot_longer()`, `pivot_wider()`)\n-   `join()` different datasets into one\n\n\\\n\\\n\\\n\\\n\n**What next?**\n\nIn the remaining days of our data preparation unit, we'll focus on working with special types of \"categorical\" variables: *characters* and *factors*. Variables with these structures often require special tools and considerations.\n\nWe'll focus on two common considerations:\n\n1.  **Regular expressions**\\\n    When working with character strings, we might want to detect, replace, or extract certain patterns. For example, recall our data on `courses`:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n    sessionID dept level    sem enroll     iid\n1 session1784    M   100 FA1991     22 inst265\n2 session1785    k   100 FA1991     52 inst458\n3 session1791    J   100 FA1993     22 inst223\n4 session1792    J   300 FA1993     20 inst235\n5 session1794    J   200 FA1993     22 inst234\n6 session1795    J   200 SP1994     26 inst230\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t1718 obs. of  6 variables:\n $ sessionID: chr  \"session1784\" \"session1785\" \"session1791\" \"session1792\" ...\n $ dept     : chr  \"M\" \"k\" \"J\" \"J\" ...\n $ level    : int  100 100 100 300 200 200 200 100 300 100 ...\n $ sem      : chr  \"FA1991\" \"FA1991\" \"FA1993\" \"FA1993\" ...\n $ enroll   : int  22 52 22 20 22 26 25 38 16 43 ...\n $ iid      : chr  \"inst265\" \"inst458\" \"inst223\" \"inst235\" ...\n```\n\n\n:::\n:::\n\n\nFocusing on just the `sem` character variable, we might want to...\n\n```         \n- change `FA` to `fall_` and `SP` to `spring_`\n- keep only courses taught in fall\n- split the variable into 2 new variables: `semester` (`FA` or `SP`) and `year`\n```\n\n\\\n\n2.  **Converting characters to factors (and factors to meaningful factors)** (today)\\\n    When categorical information is stored as a *character* variable, the categories of interest might not be labeled or ordered in a meaningful way. We can fix that!\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 1**\n\nRecall our data on presidential election outcomes in each U.S. county (except those in Alaska):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nelections <- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\") |> \n  select(state_abbr, historical, county_name, total_votes_20, repub_pct_20, dem_pct_20) |> \n  mutate(dem_support_20 = case_when(\n    (repub_pct_20 - dem_pct_20 >= 5) ~ \"low\",\n    (repub_pct_20 - dem_pct_20 <= -5) ~ \"high\",\n    .default = \"medium\"\n  ))\n\n# Check it out\nhead(elections)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state_abbr historical    county_name total_votes_20 repub_pct_20 dem_pct_20\n1         AL        red Autauga County          27770        71.44      27.02\n2         AL        red Baldwin County         109679        76.17      22.41\n3         AL        red Barbour County          10518        53.45      45.79\n4         AL        red    Bibb County           9595        78.43      20.70\n5         AL        red  Blount County          27588        89.57       9.57\n6         AL        red Bullock County           4613        24.84      74.70\n  dem_support_20\n1            low\n2            low\n3            low\n4            low\n5            low\n6           high\n```\n\n\n:::\n:::\n\n\nCheck out the below visual and numerical summaries of `dem_support_20`:\n\n-   low = the Republican won the county by at least 5 percentage points\n-   medium = the Republican and Democrat votes were within 5 percentage points\n-   high = the Democrat won the county by at least 5 percentage points\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elections, aes(x = dem_support_20)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nelections |> \n  count(dem_support_20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dem_support_20    n\n1           high  458\n2            low 2494\n3         medium  157\n```\n\n\n:::\n:::\n\n\nFollow-up:\n\nWhat don't you like about these results?\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 2: Creating factor variables with meaningfully ordered levels (fct_relevel)**\n\nThe above categories of `dem_support_20` are listed alphabetically, which isn't particularly meaningful here. This is because `dem_support_20` is a *character* variable and R thinks of character strings as words, not category labels with any meaningful order (other than alphabetical):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(elections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3109 obs. of  7 variables:\n $ state_abbr    : chr  \"AL\" \"AL\" \"AL\" \"AL\" ...\n $ historical    : chr  \"red\" \"red\" \"red\" \"red\" ...\n $ county_name   : chr  \"Autauga County\" \"Baldwin County\" \"Barbour County\" \"Bibb County\" ...\n $ total_votes_20: int  27770 109679 10518 9595 27588 4613 9488 50983 15284 12301 ...\n $ repub_pct_20  : num  71.4 76.2 53.5 78.4 89.6 ...\n $ dem_pct_20    : num  27.02 22.41 45.79 20.7 9.57 ...\n $ dem_support_20: chr  \"low\" \"low\" \"low\" \"low\" ...\n```\n\n\n:::\n:::\n\n\nWe can fix this by using `fct_relevel()` to both:\n\n(1) Store `dem_support_20` as a *factor* variable, the levels of which are recognized as specific **levels** or categories, not just words.\n\n(2) Specify a meaningful order for the levels of the factor variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Notice that the order of the levels is not alphabetical!\nelections <- elections |> \n  mutate(dem_support_20 = fct_relevel(dem_support_20, c(\"low\", \"medium\", \"high\")))\n\n# Notice the new structure of the dem_support_20 variable\nstr(elections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3109 obs. of  7 variables:\n $ state_abbr    : chr  \"AL\" \"AL\" \"AL\" \"AL\" ...\n $ historical    : chr  \"red\" \"red\" \"red\" \"red\" ...\n $ county_name   : chr  \"Autauga County\" \"Baldwin County\" \"Barbour County\" \"Bibb County\" ...\n $ total_votes_20: int  27770 109679 10518 9595 27588 4613 9488 50983 15284 12301 ...\n $ repub_pct_20  : num  71.4 76.2 53.5 78.4 89.6 ...\n $ dem_pct_20    : num  27.02 22.41 45.79 20.7 9.57 ...\n $ dem_support_20: Factor w/ 3 levels \"low\",\"medium\",..: 1 1 1 1 1 3 1 1 1 1 ...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# And plot dem_support_20\nggplot(elections, aes(x = dem_support_20)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 3: Changing the labels of the levels in factor variables**\n\nWe now have a *factor* variable, `dem_support_20`, with categories that are ordered in a meaningful way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelections |> \n  count(dem_support_20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dem_support_20    n\n1            low 2494\n2         medium  157\n3           high  458\n```\n\n\n:::\n:::\n\n\nBut maybe we want to change up the category *labels*. For demo purposes, let's create a *new* factor variable, `results_20`, that's the same as `dem_support_20` but with different category labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can redefine any number of the category labels.\n# Here we'll relabel all 3 categories:\nelections <- elections |> \n  mutate(results_20 = fct_recode(dem_support_20, \n                                 \"strong republican\" = \"low\",\n                                 \"close race\" = \"medium\",\n                                 \"strong democrat\" = \"high\"))\n\n# Check it out\n# Note that the new category labels are still in a meaningful,\n# not necessarily alphabetical, order!\nelections |> \n  count(results_20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         results_20    n\n1 strong republican 2494\n2        close race  157\n3   strong democrat  458\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 4: Re-ordering factor levels**\n\nFinally, let's explore how the Republican vote varied from county to county within each state:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note that we're just piping the data into ggplot instead of writing\n# it as the first argument\nelections |> \n  ggplot(aes(x = repub_pct_20, fill = state_abbr)) + \n    geom_density(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-9-1.png){width=432}\n:::\n:::\n\n\nThis is too many density plots to put on top of one another. Let's spread these out while keeping them in the same frame, hence easier to compare, using a **joy plot** or **ridge plot**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggridges)\nelections |> \n  ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) + \n    geom_density_ridges() + \n    scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nOK, but this is alphabetical. Suppose we want to reorder the states according to their typical Republican support. Recall that we did something similar in Example 2, using `fct_relevel()` to specify a meaningful order for the `dem_support_20` categories:\n\n`fct_relevel(dem_support_20, c(\"low\", \"medium\", \"high\"))`\n\nWe *could* use `fct_relevel()` to reorder the states here, but what would be the drawbacks?\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 5: Re-ordering factor levels according to another variable**\n\nWhen a meaningful order for the categories of a factor variable can be defined by *another* variable in our dataset, we can use `fct_reorder()`. In our joy plot, let's reorder the states according to their *median* Republican support:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Since we might want states to be alphabetical in other parts of our analysis,\n# we'll pipe the data into the ggplot without storing it:\nelections |> \n  mutate(state_abbr = fct_reorder(state_abbr, repub_pct_20, .fun = \"median\")) |> \n  ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) + \n    geom_density_ridges() + \n    scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# How did the code change?\n# And the corresponding output?\nelections |> \n  mutate(state_abbr = fct_reorder(state_abbr, repub_pct_20, .fun = \"median\", .desc = TRUE)) |> \n  ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) + \n    geom_density_ridges() + \n    scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**WORKING WITH FACTOR VARIABLES**\n\nThe `forcats` package, part of the `tidyverse`, includes handy functions for working with categorical variables (`for` + `cats`):\n\n![](https://forcats.tidyverse.org/logo.png)\n\nHere are just some, some of which we explored above:\n\n-   functions for changing the **order** of factor levels\n    -   `fct_relevel()` = *manually* reorder levels\n    -   `fct_reorder()` = reorder levels according to values of another *variable*\n    -   `fct_infreq()` = order levels from highest to lowest frequency\n    -   `fct_rev()` = reverse the current order\n-   functions for changing the **labels** or values of factor levels\n    -   `fct_recode()` = *manually* change levels\n    -   `fct_lump()` = *group together* least common levels\n\n\\\n\\\n\\\n\\\n\n## Exercises\n\nThe exercises revisit our `grades` data:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n     sid grade   sessionID\n1 S31185    D+ session1784\n2 S31185    B+ session1785\n3 S31185    A- session1791\n4 S31185    B+ session1792\n5 S31185    B- session1794\n6 S31185    C+ session1795\n```\n\n\n:::\n:::\n\n\nWe'll explore the number of times each grade was assigned:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution <- grades |> \n  count(grade)\n\nhead(grade_distribution)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  grade    n\n1     A 1506\n2    A- 1381\n3    AU   27\n4     B  804\n5    B+ 1003\n6    B-  330\n```\n\n\n:::\n:::\n\n\n### Exercise 1: Changing the order (option 1) {.unnumbered}\n\nCheck out a **column plot** of the number of times each grade was assigned during the study period. This is similar to a bar plot, but where we define the height of a bar according to variable in our dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution |> \n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThe order of the grades is goofy! Construct a new column plot, manually reordering the grades from high (A) to low (NC) with \"S\" and \"AU\" at the end:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution |>\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) |>\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nConstruct a new column plot, reordering the grades in ascending frequency (i.e. how often the grades were assigned):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution |>\n  mutate(grade = fct_reorder(grade, n)) |>\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nConstruct a new column plot, reordering the grades in descending frequency (i.e. how often the grades were assigned):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution |>\n  mutate(grade = fct_reorder(grade, n, .desc = TRUE)) |>\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 2: Changing factor level labels {.unnumbered}\n\nIt may not be clear what \"AU\" and \"S\" stand for. Construct a new column plot that renames these levels \"Audit\" and \"Satisfactory\", while keeping the other grade labels the same *and* in a meaningful order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution |>\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) |>\n  mutate(grade = fct_recode(grade, \"Satisfactory\" = \"S\", \"Audit\" = \"AU\")) |>  # Multiple pieces go into the last 2 blanks\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n## Solutions\n\n<details>\n\n<summary>Click for Solutions</summary>\n\n**EXAMPLE 1**\n\nThe categories are in alphabetical order, which isn't meaningful here.\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 4: Re-ordering factor levels**\n\nwe would have to:\n\n1.  Calculate the typical Republican support in each state, e.g. using `group_by()` and `summarize()`.\n2.  We'd then have to manually type out a meaningful order for 50 states! That's a lot of typing and manual bookkeeping.\n\n\\\n\\\n\\\n\\\n\n### Exercise 1: Changing the order {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution |>\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) |>\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution |>\n  mutate(grade = fct_reorder(grade, n)) |>\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution |>\n  mutate(grade = fct_reorder(grade, n, .desc = TRUE)) |>\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 2: Changing factor level labels {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution |>\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) |>\n  mutate(grade = fct_recode(grade, \"Satisfactory\" = \"S\", \"Audit\" = \"AU\")) |>  # Multiple pieces go into the last 2 blanks\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n```\n\n::: {.cell-output-display}\n![](activity-12_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n</details>\n",
    "supporting": [
      "activity-12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}