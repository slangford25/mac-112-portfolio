{
  "hash": "5c02649d89b604fef0e42d3c2581d750",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Strings\"\nnumber-sections: true\nexecute: \n  warning: false\nfig-env: 'figure'\nfig-pos: 'h'\nfig-align: center\ncode-fold: false\n---\n\n\n\n\n::: {.callout-caution title=\"Learning Goals\"}\n-   Learn some fundamentals of working with strings of text data.\n-   Learn functions to search and replace, detect patterns, locate patterns, extract patterns, and separate text with the `stringr` package.\n:::\n\n::: {.callout-note title=\"Additional Resources\"}\nFor more information about the topics covered in this chapter, refer to the resources below:\n\n-   [Working with strings (YouTube)](https://www.youtube.com/watch?v=__pJ_u94LZg&t=52s) by Lisa Lendway\n-   [strings cheat sheet (pdf)](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf)\n-   [Strings (html)](https://r4ds.hadley.nz/strings.html) by Wickham, Ã‡etinkaya-Rundel, & Grolemund\n-   [Regular expressions (html)](https://mdsr-book.github.io/mdsr2e/ch-text.html#regular-expressions-using-macbeth) by Baumer, Kaplan, and Horton\n-   [RegExplain RStudio addin tool (html)](https://www.garrickadenbuie.com/project/regexplain/) (Garrick Aden-Buie)\n-   [regexr exploration tool (html)](https://regexr.com/)\n:::\n\n\n\n## Warm-up\n\n**WHERE ARE WE?**\n\nWe're in the *last day* of our \"data preparation\" unit:\n\n![](https://mac-stat.github.io/images/112/legos.png)\n\nBefore spring break, we started discussing some considerations in working with special types of \"categorical\" variables: *characters* and *factors*.\n\n1.  **Converting characters to factors (and factors to meaningful factors)** (last time)\\\n    When categorical information is stored as a *character* variable, the categories of interest might not be labeled or ordered in a meaningful way. We can fix that!\n\n2.  **Strings** (today!)\\\n    When working with character strings, we might want to detect, replace, or extract certain *patterns*. For example, recall our data on `courses`:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n    sessionID dept level    sem enroll     iid\n1 session1784    M   100 FA1991     22 inst265\n2 session1785    k   100 FA1991     52 inst458\n3 session1791    J   100 FA1993     22 inst223\n4 session1792    J   300 FA1993     20 inst235\n5 session1794    J   200 FA1993     22 inst234\n6 session1795    J   200 SP1994     26 inst230\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t1718 obs. of  6 variables:\n $ sessionID: chr  \"session1784\" \"session1785\" \"session1791\" \"session1792\" ...\n $ dept     : chr  \"M\" \"k\" \"J\" \"J\" ...\n $ level    : int  100 100 100 300 200 200 200 100 300 100 ...\n $ sem      : chr  \"FA1991\" \"FA1991\" \"FA1993\" \"FA1993\" ...\n $ enroll   : int  22 52 22 20 22 26 25 38 16 43 ...\n $ iid      : chr  \"inst265\" \"inst458\" \"inst223\" \"inst235\" ...\n```\n\n\n:::\n:::\n\n\nFocusing on just the `sem` character variable, we might want to...\n\n```         \n- change `FA` to `fall_` and `SP` to `spring_`\n- keep only courses taught in fall\n- split the variable into 2 new variables: `semester` (`FA` or `SP`) and `year`\n```\n\n3.  Much more! (maybe in your projects or COMP/STAT 212)\\\n    There are a lot of ways to process character variables. For example, we might have a variable that records the text for a sample of news articles. We might want to analyze things like the articles' *sentiments*, word counts, typical word lengths, most common words, etc.\n\n\\\n\\\n\\\n\\\n\n**ESSENTIAL STRING FUNCTIONS**\n\nThe `stringr` package within `tidyverse` contains lots of functions to help process strings. We'll focus on the most common. Letting `x` be a string variable...\n\n| function            | arguments                 | returns           |\n|:--------------------|:--------------------------|:------------------|\n| `str_replace()`     | `x, pattern, replacement` | a modified string |\n| `str_replace_all()` | `x, pattern, replacement` | a modified string |\n| `str_to_lower()`    | `x`                       | a modified string |\n| `str_sub()`         | `x, start, end`           | a modified string |\n| `str_length()`      | `x`                       | a number          |\n| `str_detect()`      | `x, pattern`              | TRUE/FALSE        |\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 1**\n\nConsider the following data with string variables :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nclasses <- data.frame(\n  sem        = c(\"SP2023\", \"FA2023\", \"SP2024\"),\n  area       = c(\"History\", \"Math\", \"Anthro\"),\n  enroll     = c(\"30 - people\", \"20 - people\", \"25 - people\"),\n  instructor = c(\"Ernesto Capello\", \"Lori Ziegelmeier\", \"Arjun Guneratne\")\n)\n\nclasses\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll       instructor\n1 SP2023 History 30 - people  Ernesto Capello\n2 FA2023    Math 20 - people Lori Ziegelmeier\n3 SP2024  Anthro 25 - people  Arjun Guneratne\n```\n\n\n:::\n:::\n\n\nUsing only your intuition, use our `str_` functions to complete the following. NOTE: You might be able to use other wrangling verbs in some cases, but focus on the new functions here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a new variable \"num\" that adds up the number of characters in the area label\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change the areas to \"history\", \"math\", \"anthro\" instead of \"History\", \"Math\", \"Anthro\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a variable that id's which courses were taught in spring\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change the semester labels to \"fall2023\", \"spring2024\", \"spring2023\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# In the enroll variable, change all e's to 3's (just because?)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use sem to create 2 new variables, one with only the semester (SP/FA) and 1 with the year\n```\n:::\n\n\n\\\n\\\n\\\n\\\n\n**SUMMARY**\n\nHere's what we learned about each function:\n\n-   `str_replace(x, pattern, replacement)` finds the *first* part of `x` that matches the `pattern` and replaces it with `replacement`\n\n-   `str_replace_all(x, pattern, replacement)` finds *all* instances in `x` that matches the `pattern` and replaces it with `replacement`\n\n-   `str_to_lower(x)` converts all upper case letters in `x` to lower case\n\n-   `str_sub(x, start, end)` only keeps a subset of characters in `x`, from `start` (a number indexing the first letter to keep) to `end` (a number indexing the last letter to keep)\n\n-   `str_length(x)` records the number of characters in `x`\n\n-   `str_detect(x, pattern)` is TRUE if `x` contains the given `pattern` and FALSE otherwise\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 2**\n\nSuppose we *only* want the spring courses:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How can we do this after mutating?\nclasses |> \n  mutate(spring = str_detect(sem, \"SP\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll       instructor spring\n1 SP2023 History 30 - people  Ernesto Capello   TRUE\n2 FA2023    Math 20 - people Lori Ziegelmeier  FALSE\n3 SP2024  Anthro 25 - people  Arjun Guneratne   TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# We don't have to mutate first!\nclasses |> \n  filter(str_detect(sem, \"SP\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll      instructor\n1 SP2023 History 30 - people Ernesto Capello\n2 SP2024  Anthro 25 - people Arjun Guneratne\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Yet another way\nclasses |> \n  filter(!str_detect(sem, \"FA\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll      instructor\n1 SP2023 History 30 - people Ernesto Capello\n2 SP2024  Anthro 25 - people Arjun Guneratne\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 3**\n\nSuppose we wanted to get separate columns for the first and last names of each course instructor in `classes`. Try doing this using `str_sub()`. But don't try too long! Explain what trouble you ran into.\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 4**\n\nIn general, when we want to split a column into 2+ new columns, we can often use `separate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclasses |> \n  separate(instructor, c(\"first\", \"last\"), sep = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll   first        last\n1 SP2023 History 30 - people Ernesto     Capello\n2 FA2023    Math 20 - people    Lori Ziegelmeier\n3 SP2024  Anthro 25 - people   Arjun   Guneratne\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sometimes the function can \"intuit\" how we want to separate the variable\nclasses |> \n  separate(instructor, c(\"first\", \"last\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll   first        last\n1 SP2023 History 30 - people Ernesto     Capello\n2 FA2023    Math 20 - people    Lori Ziegelmeier\n3 SP2024  Anthro 25 - people   Arjun   Guneratne\n```\n\n\n:::\n:::\n\n\na.  Separate enroll into 2 separate columns: `students` and `people`. (These columns don't make sense this is just practice).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# classes |> \n#   separate(___, c(___, ___), sep = \"___\")\n```\n:::\n\n\nb.  We separated `sem` into semester and year above using `str_sub()`. Why would this be hard using `separate()`?\n\nc.  When we want to split a column into 2+ new columns (or do other types of string processing), but there's no consistent pattern by which to do this, we can use *regular expressions* (an optional topic):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# (?<=[SP|FA]): any character *before* the split point is a \"SP\" or \"FA\"\n# (?=2): the first character *after* the split point is a 2\nclasses |> \n  separate(sem, \n          c(\"semester\", \"year\"),\n          \"(?<=[SP|FA])(?=2)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  semester year    area      enroll       instructor\n1       SP 2023 History 30 - people  Ernesto Capello\n2       FA 2023    Math 20 - people Lori Ziegelmeier\n3       SP 2024  Anthro 25 - people  Arjun Guneratne\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# More general:\n# (?<=[a-zA-Z]): any character *before* the split point is a lower or upper case letter\n# (?=[0-9]): the first character *after* the split point is number\nclasses |> \n  separate(sem, \n          c(\"semester\", \"year\"),\n          \"(?<=[A-Z])(?=[0-9])\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  semester year    area      enroll       instructor\n1       SP 2023 History 30 - people  Ernesto Capello\n2       FA 2023    Math 20 - people Lori Ziegelmeier\n3       SP 2024  Anthro 25 - people  Arjun Guneratne\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n## Exercises\n\n### Exercise 1: Time slots {.unnumbered}\n\nThe `courses` data includes *actual* data scraped from Mac's [class schedule](https://macadmsys.macalester.edu/macssb/customPage/page/classSchedule). (Thanks to Prof Leslie Myint for the scraping code!!)\n\nIf you want to learn how to scrape data, take COMP/STAT 212, Intermediate Data Science! NOTE: For simplicity, I removed classes that had \"TBA\" for the `days`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses <- read.csv(\"https://mac-stat.github.io/data/registrar.csv\")\n\n# Check it out\nhead(courses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       number   crn                                                name  days\n1 AMST 112-01 10318         Introduction to African American Literature M W F\n2 AMST 194-01 10073              Introduction to Asian American Studies M W F\n3 AMST 194-F1 10072 Whatâ€™s After White Empire - And Is It Already Here?  T R \n4 AMST 203-01 10646 Politics and Inequality: The American Welfare State M W F\n5 AMST 205-01 10842                         Trans Theories and Politics  T R \n6 AMST 209-01 10474                   Civil Rights in the United States   W  \n             time      room             instructor avail_max\n1 9:40 - 10:40 am  MAIN 009       Daylanne English    3 / 20\n2  1:10 - 2:10 pm MUSIC 219          Jake Nagasawa   -4 / 16\n3  3:00 - 4:30 pm   HUM 214 Karin Aguilar-San Juan    0 / 14\n4 9:40 - 10:40 am  CARN 305          Lesley Lavery    3 / 25\n5  3:00 - 4:30 pm  MAIN 009              Myrl Beam   -2 / 20\n6 7:00 - 10:00 pm  MAIN 010         Walter Greason   -1 / 15\n```\n\n\n:::\n:::\n\n\nUse our more familiar wrangling tools to warm up.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Construct a table that indicates the number of classes offered in each day/time slot\n# Print only the 6 most popular time slots\n\ncourses %>%  \n  count(days, time) %>%  \n  arrange(desc(n)) %>%  \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   days             time  n\n1 M W F 10:50 - 11:50 am 76\n2  T R   9:40 - 11:10 am 71\n3 M W F  9:40 - 10:40 am 68\n4 M W F   1:10 - 2:10 pm 66\n5  T R    3:00 - 4:30 pm 62\n6  T R    1:20 - 2:50 pm 59\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 2: Prep the data {.unnumbered}\n\nSo that we can analyze it later, we want to wrangle the `courses` data:\n\n-   Let's get some enrollment info:\n    -   Split `avail_max` into 2 separate variables: `avail` and `max`.\n    -   Use `avail` and `max` to define a new variable called `enrollment`. HINT: You'll need `as.numeric()`\n-   Split the course `number` into 3 separate variables: `dept`, `number`, and `section`. HINT: You can use `separate()` to split a variable into 3, not just 2 new variables.\n\nStore this as `courses_clean` so that you can use it later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses_clean <- courses %>% \n  separate(avail_max, c(\"avail\", \"max\"), sep = \"/\") %>% \n  mutate(avail = as.numeric(avail), max = as.numeric(max)) %>% \n  mutate(enrollment = max-avail) %>% \n  separate(number, c(\"dept\", \"number\", \"section\"))\n```\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 3: Courses by department {.unnumbered}\n\nUsing `courses_clean`...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify the 6 departments that offered the most sections\ncourses_clean %>% \n  count(dept) %>% \n  arrange(desc(n)) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dept  n\n1 SPAN 45\n2 BIOL 44\n3 ENVI 38\n4 PSYC 37\n5 CHEM 33\n6 COMP 31\n```\n\n\n:::\n\n```{.r .cell-code}\n# Identify the 6 departments with the longest average course titles\ncourses_clean %>% \n  mutate(length = str_length(name)) %>% \n  group_by(dept) %>% \n  summarize(avg_len = mean(length)) %>% \n  arrange(desc(avg_len)) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 2\n  dept  avg_len\n  <chr>   <dbl>\n1 WGSS     46.3\n2 INTL     41.4\n3 EDUC     39.4\n4 MCST     39.4\n5 POLI     37.4\n6 AMST     37.3\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 4: STAT courses {.unnumbered}\n\n#### Part a {.unnumbered}\n\nGet a subset of `courses_clean` that only includes courses taught by Alicia Johnson.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses_clean %>% \n  filter(instructor == \"Alicia Johnson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dept number section   crn                         name  days            time\n1 STAT    253      01 10806 Statistical Machine Learning  T R  9:40 - 11:10 am\n2 STAT    253      02 10807 Statistical Machine Learning  T R   1:20 - 2:50 pm\n3 STAT    253      03 10808 Statistical Machine Learning  T R   3:00 - 4:30 pm\n        room     instructor avail max enrollment\n1 THEATR 206 Alicia Johnson    -3  20         23\n2 THEATR 206 Alicia Johnson    -3  20         23\n3 THEATR 206 Alicia Johnson     2  20         18\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nCreate a new dataset from `courses_clean`, named `stat`, that only includes STAT sections. In this dataset:\n\n-   In the course names:\n\n    -   Remove \"Introduction to\" from any name.\n    -   Shorten \"Statistical\" to \"Stat\" where relevant.\n\n-   Define a variable that records the `start_time` for the course.\n\n-   Keep only the `number, name, start_time, enroll` columns.\n\n-   The result should have 19 rows and 4 columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstat <- courses_clean %>% \n  filter(dept == \"STAT\") %>% \n  mutate(name = str_replace(name, \"Introduction to \", \"\")) %>% \n  mutate(name = str_replace(name, \"Statistical\", \"Stat\")) %>% \n  mutate(start_time = str_sub(time, 1, 5)) %>% \n  select(number, name, start_time, enrollment)\n\ndim(stat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19  4\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 5: More cleaning {.unnumbered}\n\nIn the next exercises, we'll dig into enrollments. Let's get the data ready for that analysis here. Make the following changes to the `courses_clean` data. Because they have different enrollment structures, and we don't want to compare apples and oranges, *remove* the following:\n\n-   all sections in `PE` and `INTD` (interdisciplinary studies courses)\n\n-   all music ensembles and dance practicums, i.e. all MUSI and THDA classes with numbers less than 100. HINT: `!(dept == \"MUSI\" & as.numeric(number) < 100)`\n\n-   all lab sections. Be careful which variable you use here. For example, you don't want to search by \"Lab\" and accidentally eliminate courses with words such as \"Labor\".\n\nSave the results as `enrollments` (don't overwrite `courses_clean`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenrollments <- courses_clean %>% \n  filter(dept != c(\"PE\", \"INTD\")) %>% \n  filter(!(dept == \"MUSI\" & as.numeric(number) < 100)) %>% \n  filter(!(dept == \"THDA\" & as.numeric(number) < 100)) %>% \n  filter(!str_detect(section, \"L\"))\n  \nhead(enrollments)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dept number section   crn                                                name\n1 AMST    112      01 10318         Introduction to African American Literature\n2 AMST    194      01 10073              Introduction to Asian American Studies\n3 AMST    194      F1 10072 Whatâ€™s After White Empire - And Is It Already Here?\n4 AMST    203      01 10646 Politics and Inequality: The American Welfare State\n5 AMST    205      01 10842                         Trans Theories and Politics\n6 AMST    209      01 10474                   Civil Rights in the United States\n   days            time      room             instructor avail max enrollment\n1 M W F 9:40 - 10:40 am  MAIN 009       Daylanne English     3  20         17\n2 M W F  1:10 - 2:10 pm MUSIC 219          Jake Nagasawa    -4  16         20\n3  T R   3:00 - 4:30 pm   HUM 214 Karin Aguilar-San Juan     0  14         14\n4 M W F 9:40 - 10:40 am  CARN 305          Lesley Lavery     3  25         22\n5  T R   3:00 - 4:30 pm  MAIN 009              Myrl Beam    -2  20         22\n6   W   7:00 - 10:00 pm  MAIN 010         Walter Greason    -1  15         16\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 6: Enrollment & departments {.unnumbered}\n\nExplore enrollments by department. *You* decide what research questions to focus on. Use both visual and numerical summaries.\n\n\\\n\\\n\\\n\\\n\n### Exercise 7: Enrollment & faculty {.unnumbered}\n\nLet's now explore enrollments by instructor. In doing so, we have to be cautious of cross-listed courses that are listed under multiple different departments. Uncomment the code lines in the chunk below for an example.\n\n::: {.callout-tip title=\"Commenting/Uncommenting Code\"}\n\nTo comment/uncomment several lines of code at once, highlight them then click <kbd>ctrl/cmd+shift+c</kbd>.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenrollments |>\n  filter(dept %in% c(\"STAT\", \"COMP\"), number == 112, section == \"01\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dept number section   crn                         name  days           time\n1 COMP    112      01 10248 Introduction to Data Science  T R  3:00 - 4:30 pm\n2 STAT    112      01 10249 Introduction to Data Science  T R  3:00 - 4:30 pm\n      room        instructor avail max enrollment\n1 OLRI 254 Brianna Heggeseth     1  28         27\n2 OLRI 254 Brianna Heggeseth     1  28         27\n```\n\n\n:::\n:::\n\n\nNotice that these are the exact same section! In order to not double count an instructor's enrollments, we can keep only the courses that have `distinct()` *combinations* of `days, time, instructor` values.  Uncomment the code lines in the chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenrollments_2 <- enrollments |>\n  distinct(days, time, instructor, .keep_all = TRUE)\n\n# NOTE: By default this keeps the first department alphabetically\n#That's fine because we won't use this to analyze department enrollments!\nenrollments_2 |>\n  filter(instructor == \"Brianna Heggeseth\", name == \"Introduction to Data Science\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dept number section   crn                         name  days           time\n1 COMP    112      01 10248 Introduction to Data Science  T R  3:00 - 4:30 pm\n      room        instructor avail max enrollment\n1 OLRI 254 Brianna Heggeseth     1  28         27\n```\n\n\n:::\n:::\n\n\n*Now*, explore enrollments by instructor. *You* decide what research questions to focus on. Use both visual and numerical summaries.\n\nCAVEAT: The above code doesn't deal with *co-taught* courses that have more than one instructor. Thus instructors that co-taught are recorded as a pair, and their co-taught enrollments aren't added to their total enrollments. This is tough to get around with how the data were scraped as the instructor names are smushed together, not separated by a comma!\n\n\n::: {.cell}\n\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Optional extra practice {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a bar plot showing the number of night courses by day of the week\n# Use courses_clean\n```\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Dig Deeper: regex {.unnumbered}\n\nExample 4 gave 1 small example of a regular expression.\n\nThese are handy when we want process a string variable, but there's no consistent pattern by which to do this. You must think about the structure of the string and how you can use regular expressions to capture the patterns you want (and exclude the patterns you don't want).\n\nFor example, how would you describe the pattern of a 10-digit phone number? Limit yourself to just a US phone number for now.\n\n-   The first 3 digits are the area code.\n-   The next 3 digits are the exchange code.\n-   The last 4 digits are the subscriber number.\n\nThus, a regular expression for a US phone number could be:\n\n-   `[:digit:]{3}-[:digit:]{3}-[:digit:]{4}` which limits you to XXX-XXX-XXXX pattern or\n-   `\\\\([:digit:]{3}\\\\) [:digit:]{3}-[:digit:]{4}` which limits you to (XXX) XXX-XXXX pattern or\n-   `[:digit:]{3}\\\\.[:digit:]{3}\\\\.[:digit:]{4}` which limits you to XXX.XXX.XXXX pattern\n\nThe following would include the three patterns above in addition to the XXXXXXXXXX pattern (no dashes or periods): - `[\\\\(]*[:digit:]{3}[-.\\\\)]*[:digit:]{3}[-.]*[:digit:]{4}`\n\nIn order to write a regular expression, you first need to consider what patterns you want to include and exclude.\n\nWork through the following examples, and the tutorial after them to learn about the syntax.\n\n**EXAMPLES**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define some strings to play around with\nexample <- \"The quick brown fox jumps over the lazy dog.\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace(example, \"quick\", \"really quick\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The really quick brown fox jumps over the lazy dog.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"(fox|dog)\", \"****\") # | reads as OR\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The quick brown **** jumps over the lazy ****.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"(fox|dog).\", \"****\") # \".\" for any character\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The quick brown ****jumps over the lazy ****\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"(fox|dog)\\\\.$\", \"****\") # at end of sentence only, \"\\\\.\" only for a period\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The quick brown fox jumps over the lazy ****\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"the\", \"a\") # case-sensitive only matches one\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The quick brown fox jumps over a lazy dog.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"[Tt]he\", \"a\") # # will match either t or T; could also make \"a\" conditional on capitalization of t\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a quick brown fox jumps over a lazy dog.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"[Tt]he\", \"a\") # first match only\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a quick brown fox jumps over a lazy dog.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# More examples\nexample2 <- \"Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could\"\nexample3 <- \"This is a test\"\n\n# Store the examples in 1 place\nexamples <- c(example, example2, example3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npat <- \"[^aeiouAEIOU ]{3}\" # Regular expression for three straight consonants. Note that I've excluded spaces as well\n\nstr_detect(examples, pat) # TRUE/FALSE if it detects pattern\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_subset(examples, pat) # Pulls out those that detects pattern\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The quick brown fox jumps over the lazy dog.\"                                                                                                        \n[2] \"Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npat2 <- \"[^aeiouAEIOU ][aeiouAEIOU]{2}[^aeiouAEIOU ]{1}\" # consonant followed by two vowels followed by a consonant\n\nstr_extract(example2, pat2) # extract first match\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"road\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(example2, pat2, simplify = TRUE) # extract all matches\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]   [,2]   [,3]   [,4]   [,5]   [,6]  \n[1,] \"road\" \"wood\" \"coul\" \"tood\" \"look\" \"coul\"\n```\n\n\n:::\n:::\n\n\n**TUTORIAL**\n\nTry out this [interactive tutorial](https://regexone.com/). Note that neither the tutorial nor regular expressions more generally are specific to `R`, but it still illustrates the main ideas of regular expressions.\n\n\\\n\\\n\\\n\\\n\n::: content-hidden\n## Wrap-up\n\n-   Our quiz is Tuesday. Remember to be on time and review the quiz info on the syllabus and quiz practice. For example, don't forget that you can bring an 8.5x11 note sheet with writing on both sides. You will hand this in.\n\n-   Due dates:\n\n    -   Homework 5 is due today\n    -   Homework 6 is due Tuesday, April 2 and will be posted tomorrow (after the Homework 5 due date). It's similar to Homework 3 -- you'll pick a new TidyTuesday dataset, make 3 plots, and some other minor changes. Thus you can start now!\n\n\\\n\\\n\\\n\\\n:::\n\n## Solutions\n\n<details>\n\n<summary>Click for Solutions</summary>\n\n**EXAMPLE 1**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a new variable \"num\" that adds up the number of characters in the area label\nclasses |> \n  mutate(num = str_length(area))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll       instructor num\n1 SP2023 History 30 - people  Ernesto Capello   7\n2 FA2023    Math 20 - people Lori Ziegelmeier   4\n3 SP2024  Anthro 25 - people  Arjun Guneratne   6\n```\n\n\n:::\n\n```{.r .cell-code}\n# Change the areas to \"history\", \"math\", \"anthro\"\nclasses |> \n  mutate(area = str_to_lower(area))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll       instructor\n1 SP2023 history 30 - people  Ernesto Capello\n2 FA2023    math 20 - people Lori Ziegelmeier\n3 SP2024  anthro 25 - people  Arjun Guneratne\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create a variable that id's which courses were taught in spring \nclasses |> \n  mutate(spring = str_detect(sem, \"SP\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll       instructor spring\n1 SP2023 History 30 - people  Ernesto Capello   TRUE\n2 FA2023    Math 20 - people Lori Ziegelmeier  FALSE\n3 SP2024  Anthro 25 - people  Arjun Guneratne   TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Change the semester labels to \"fall2023\", \"spring2024\", \"spring2023\"\nclasses |> \n  mutate(sem = str_replace(sem, \"SP\", \"spring\")) |> \n  mutate(sem = str_replace(sem, \"FA\", \"fall\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         sem    area      enroll       instructor\n1 spring2023 History 30 - people  Ernesto Capello\n2   fall2023    Math 20 - people Lori Ziegelmeier\n3 spring2024  Anthro 25 - people  Arjun Guneratne\n```\n\n\n:::\n\n```{.r .cell-code}\n# In the enroll variable, change all e's to 3's (just because?)\nclasses |> \n  mutate(enroll = str_replace_all(enroll, \"e\", \"3\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll       instructor\n1 SP2023 History 30 - p3opl3  Ernesto Capello\n2 FA2023    Math 20 - p3opl3 Lori Ziegelmeier\n3 SP2024  Anthro 25 - p3opl3  Arjun Guneratne\n```\n\n\n:::\n\n```{.r .cell-code}\n# Use sem to create 2 new variables, one with only the semester (SP/FA) and 1 with the year\nclasses |> \n  mutate(semester = str_sub(sem, 1, 2),\n         year = str_sub(sem, 3, 6))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll       instructor semester year\n1 SP2023 History 30 - people  Ernesto Capello       SP 2023\n2 FA2023    Math 20 - people Lori Ziegelmeier       FA 2023\n3 SP2024  Anthro 25 - people  Arjun Guneratne       SP 2024\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n**EXAMPLE 2**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How can we do this after mutating?\nclasses |> \n  mutate(spring = str_detect(sem, \"SP\")) |> \n  filter(spring == TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sem    area      enroll      instructor spring\n1 SP2023 History 30 - people Ernesto Capello   TRUE\n2 SP2024  Anthro 25 - people Arjun Guneratne   TRUE\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 1: Popular time slots {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Construct a table that indicates the number of classes offered in each day/time slot\n# Print only the 6 most popular time slots\ncourses |> \n  count(days, time) |> \n  arrange(desc(n)) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   days             time  n\n1 M W F 10:50 - 11:50 am 76\n2  T R   9:40 - 11:10 am 71\n3 M W F  9:40 - 10:40 am 68\n4 M W F   1:10 - 2:10 pm 66\n5  T R    3:00 - 4:30 pm 62\n6  T R    1:20 - 2:50 pm 59\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 2: Prep the data {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses_clean <- courses |> \n  separate(avail_max, c(\"avail\", \"max\"), sep = \" / \") |> \n  mutate(enroll = as.numeric(max) - as.numeric(avail)) |> \n  separate(number, c(\"dept\", \"number\", \"section\"))\n  \nhead(courses_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dept number section   crn                                                name\n1 AMST    112      01 10318         Introduction to African American Literature\n2 AMST    194      01 10073              Introduction to Asian American Studies\n3 AMST    194      F1 10072 Whatâ€™s After White Empire - And Is It Already Here?\n4 AMST    203      01 10646 Politics and Inequality: The American Welfare State\n5 AMST    205      01 10842                         Trans Theories and Politics\n6 AMST    209      01 10474                   Civil Rights in the United States\n   days            time      room             instructor avail max enroll\n1 M W F 9:40 - 10:40 am  MAIN 009       Daylanne English     3  20     17\n2 M W F  1:10 - 2:10 pm MUSIC 219          Jake Nagasawa    -4  16     20\n3  T R   3:00 - 4:30 pm   HUM 214 Karin Aguilar-San Juan     0  14     14\n4 M W F 9:40 - 10:40 am  CARN 305          Lesley Lavery     3  25     22\n5  T R   3:00 - 4:30 pm  MAIN 009              Myrl Beam    -2  20     22\n6   W   7:00 - 10:00 pm  MAIN 010         Walter Greason    -1  15     16\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 3: Courses offered by department {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify the 6 departments that offered the most sections\ncourses_clean |> \n  count(dept) |> \n  arrange(desc(n)) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dept  n\n1 SPAN 45\n2 BIOL 44\n3 ENVI 38\n4 PSYC 37\n5 CHEM 33\n6 COMP 31\n```\n\n\n:::\n\n```{.r .cell-code}\n# Identify the 6 departments with the longest average course titles\ncourses_clean |> \n  mutate(length = str_length(name)) |> \n  group_by(dept) |> \n  summarize(avg_length = mean(length)) |> \n  arrange(desc(avg_length)) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 2\n  dept  avg_length\n  <chr>      <dbl>\n1 WGSS        46.3\n2 INTL        41.4\n3 EDUC        39.4\n4 MCST        39.4\n5 POLI        37.4\n6 AMST        37.3\n```\n\n\n:::\n:::\n\n\n### Exercise 4: STAT courses {.unnumbered}\n\n#### Part a {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses_clean |> \n  filter(str_detect(instructor, \"Alicia Johnson\")) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dept number section   crn                         name  days            time\n1 STAT    253      01 10806 Statistical Machine Learning  T R  9:40 - 11:10 am\n2 STAT    253      02 10807 Statistical Machine Learning  T R   1:20 - 2:50 pm\n3 STAT    253      03 10808 Statistical Machine Learning  T R   3:00 - 4:30 pm\n        room     instructor avail max enroll\n1 THEATR 206 Alicia Johnson    -3  20     23\n2 THEATR 206 Alicia Johnson    -3  20     23\n3 THEATR 206 Alicia Johnson     2  20     18\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstat <- courses_clean |> \n  filter(dept == \"STAT\") |> \n  mutate(name = str_replace(name, \"Introduction to \", \"\")) |>\n  mutate(name = str_replace(name, \"Statistical\", \"Stat\")) |> \n  mutate(start_time = str_sub(time, 1, 5)) |> \n  select(number, name, start_time, enroll)\n\nstat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   number                      name start_time enroll\n1     112              Data Science      3:00      27\n2     112              Data Science      9:40      21\n3     112              Data Science      1:20      25\n4     125              Epidemiology      12:00     26\n5     155             Stat Modeling      1:10      32\n6     155             Stat Modeling      9:40      24\n7     155             Stat Modeling      10:50     26\n8     155             Stat Modeling      3:30      25\n9     155             Stat Modeling      1:20      30\n10    155             Stat Modeling      3:00      27\n11    212 Intermediate Data Science      9:40      11\n12    212 Intermediate Data Science      1:20      11\n13    253     Stat Machine Learning      9:40      23\n14    253     Stat Machine Learning      1:20      23\n15    253     Stat Machine Learning      3:00      18\n16    354               Probability      3:00      22\n17    452           Correlated Data      9:40       7\n18    452           Correlated Data      1:20       8\n19    456  Projects in Data Science      9:40      11\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(stat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19  4\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 5: More cleaning {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenrollments <- courses_clean |> \n  filter(dept != \"PE\", dept != \"INTD\") |> \n  filter(!(dept == \"MUSI\" & as.numeric(number) < 100)) |> \n  filter(!(dept == \"THDA\" & as.numeric(number) < 100)) |> \n  filter(!str_detect(section, \"L\"))\n  \nhead(enrollments)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dept number section   crn                                                name\n1 AMST    112      01 10318         Introduction to African American Literature\n2 AMST    194      01 10073              Introduction to Asian American Studies\n3 AMST    194      F1 10072 Whatâ€™s After White Empire - And Is It Already Here?\n4 AMST    203      01 10646 Politics and Inequality: The American Welfare State\n5 AMST    205      01 10842                         Trans Theories and Politics\n6 AMST    209      01 10474                   Civil Rights in the United States\n   days            time      room             instructor avail max enroll\n1 M W F 9:40 - 10:40 am  MAIN 009       Daylanne English     3  20     17\n2 M W F  1:10 - 2:10 pm MUSIC 219          Jake Nagasawa    -4  16     20\n3  T R   3:00 - 4:30 pm   HUM 214 Karin Aguilar-San Juan     0  14     14\n4 M W F 9:40 - 10:40 am  CARN 305          Lesley Lavery     3  25     22\n5  T R   3:00 - 4:30 pm  MAIN 009              Myrl Beam    -2  20     22\n6   W   7:00 - 10:00 pm  MAIN 010         Walter Greason    -1  15     16\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Optional extra practice {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a bar plot showing the number of night courses by day of the week.\ncourses_clean |> \n  filter(str_detect(time, \"7:00\")) |> \n  ggplot(aes(x = days)) + \n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](activity-13_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n</details>\n",
    "supporting": [
      "activity-13_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}